{
    "sourceFile": "main.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 90,
            "patches": [
                {
                    "date": 1705702366562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1705705711780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,4 +8,65 @@\n const selAll = (e) => document.querySelectorAll(e)\r\n const l = (e) => console.log(e)\r\n \r\n l('qwe')\r\n+selAll('.lib-item__slider').forEach((el$) => {\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  connectSplideArrows(ourWorkInfoSlider, name)\r\n+  connectSplideBullets(ourWorkInfoSlider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705705900905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,5 @@\n import Splide from '@splidejs/splide'\r\n-import { AutoScroll } from '@splidejs/splide-extension-auto-scroll'\r\n-import { Intersection } from '@splidejs/splide-extension-intersection'\r\n import '@splidejs/splide/css'\r\n import './style.styl'\r\n \r\n const sel = (e) => document.querySelector(e)\r\n@@ -12,10 +10,25 @@\n selAll('.lib-item__slider').forEach((el$) => {\r\n   const name = 'lib-item'\r\n   addSplideClasses(name + '__slider')\r\n \r\n-  connectSplideArrows(ourWorkInfoSlider, name)\r\n-  connectSplideBullets(ourWorkInfoSlider, name)\r\n+  const slider = new Splide(ourWorkInfoSlider$, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n })\r\n \r\n export function onDomReady(run) {\r\n   if (document.readyState !== 'loading') {\r\n"
                },
                {
                    "date": 1705705947964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el$) => {\r\n+  l('qwe')\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  const slider = new Splide(ourWorkInfoSlider$, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706039984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \r\n   const name = 'lib-item'\r\n   addSplideClasses(name + '__slider')\r\n \r\n-  const slider = new Splide(ourWorkInfoSlider$, {\r\n+  const slider = new Splide(el$, {\r\n     arrows: false,\r\n     pagination: false,\r\n     gap: '2rem',\r\n     // type: 'loop',\r\n@@ -83,89 +83,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-l('qwe')\r\n-selAll('.lib-item__slider').forEach((el$) => {\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  const slider = new Splide(ourWorkInfoSlider$, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705706075495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n const selAll = (e) => document.querySelectorAll(e)\r\n const l = (e) => console.log(e)\r\n \r\n selAll('.lib-item__slider').forEach((el$) => {\r\n-  l('qwe')\r\n+  l('qwe', el$)\r\n \r\n   const name = 'lib-item'\r\n   addSplideClasses(name + '__slider')\r\n \r\n"
                },
                {
                    "date": 1705706161556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el$) => {\r\n+  l('qwe', el$)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  const slider = new Splide(el$, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706185603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el$) => {\r\n+  l('l', el$)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  const slider = new Splide(el$, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706260101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el$) => {\r\n+  l('l', el$)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706274732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el$) => {\r\n+  l('l', el$)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706319348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l', el)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706402064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(...e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l', el)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706416320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l', el)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706462379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l')\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706467713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l', el)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706803614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l', el)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706815936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l', isEl(el))\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706942911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,11 @@\n \r\n const sel = (e) => document.querySelector(e)\r\n const selAll = (e) => document.querySelectorAll(e)\r\n const l = (...e) => console.log(...e)\r\n-const isEl = (el) => el instanceof Document || el instanceof Element\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n \r\n selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l', isEl(el))\r\n-\r\n   const name = 'lib-item'\r\n   addSplideClasses(name + '__slider')\r\n \r\n   // const slider = new Splide(el$, {\r\n@@ -75,9 +73,13 @@\n     splide.go('>')\r\n   })\r\n }\r\n export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n+  if (typeof slider === 'string') {\r\n+    const splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    const splide = slider\r\n+  }\r\n   const track = splide.children[0]\r\n   const list = track.children[0]\r\n   const slide = list.childNodes\r\n   splide.classList.add('splide')\r\n"
                },
                {
                    "date": 1705706977152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707026129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707048551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707066307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el$, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707078852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707099722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n       },\r\n     },\r\n   })\r\n \r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n })\r\n \r\n export function onDomReady(run) {\r\n   if (document.readyState !== 'loading') {\r\n@@ -88,1403 +88,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el$, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  if (typeof slider === 'string') {\r\n-    const splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    const splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l', el)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l', el)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l')\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l', el)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(...e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l', el)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l', el)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el$) => {\r\n-  l('l', el$)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el$) => {\r\n-  l('l', el$)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el$) => {\r\n-  l('l', el$)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  const slider = new Splide(el$, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el$) => {\r\n-  l('qwe', el$)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  const slider = new Splide(el$, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el$) => {\r\n-  l('qwe', el$)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  const slider = new Splide(el$, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705707149999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707164959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   const slider = new Splide(el, {\r\n     arrows: false,\r\n     pagination: false,\r\n     gap: '2rem',\r\n-    // type: 'loop',\r\n+    type: 'loop',\r\n     perPage: 3,\r\n     speed: 1500,\r\n     easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n     breakpoints: {\r\n"
                },
                {
                    "date": 1705707185962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707359265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707415848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {})\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707421582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {})\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707440896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   addSplideClasses(el)\r\n \r\n   const slider = new Splide(el, {})\r\n \r\n-  // connectSplideArrows(slider, name)\r\n+  connectSplideArrows(slider, name)\r\n   // connectSplideBullets(slider, name)\r\n })\r\n \r\n export function onDomReady(run) {\r\n"
                },
                {
                    "date": 1705707501225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide('.lit-item__slider', {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707508890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide('.lib-item__slider', {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707578295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,95 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.lib-item__slider')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+})\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708491841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.lib-item__slider')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708558619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.lib-item__slider')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  // easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708785946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708824254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708831391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708867772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  // arrows: false,\r\n+  // pagination: false,\r\n+  // gap: '2rem',\r\n+  // type: 'loop',\r\n+  // perPage: 3,\r\n+  // speed: 1500,\r\n+  // easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  // breakpoints: {\r\n+  //   747: {\r\n+  //     perPage: 2,\r\n+  //   },\r\n+  //   478: {\r\n+  //     perPage: 1,\r\n+  //   },\r\n+  // },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708875876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  // arrows: false,\r\n+  // pagination: false,\r\n+  // gap: '2rem',\r\n+  // type: 'loop',\r\n+  perPage: 3,\r\n+  // speed: 1500,\r\n+  // easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  // breakpoints: {\r\n+  //   747: {\r\n+  //     perPage: 2,\r\n+  //   },\r\n+  //   478: {\r\n+  //     perPage: 1,\r\n+  //   },\r\n+  // },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708953436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+}).mount()\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708966065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+}).mount()\r\n+l(slider)\r\n+\r\n+connectSplideArrows(slider, name)\r\n+connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705709158282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,97 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  perMove: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+}).mount()\r\n+l(slider)\r\n+\r\n+connectSplideArrows(slider, name)\r\n+connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705709227628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,97 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  const el = sel(el)\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705709280090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705709658872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n     },\r\n   }).mount()\r\n   l(slider)\r\n \r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n })\r\n \r\n export function onDomReady(run) {\r\n   if (document.readyState !== 'loading') {\r\n@@ -69,14 +69,14 @@\n     sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n     sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n   })\r\n }\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n     splide.go('<')\r\n   })\r\n \r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n     splide.go('>')\r\n   })\r\n }\r\n export function addSplideClasses(slider) {\r\n@@ -93,1868 +93,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  const el = sel(el)\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  perMove: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-}).mount()\r\n-l(slider)\r\n-\r\n-connectSplideArrows(slider, name)\r\n-connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-}).mount()\r\n-l(slider)\r\n-\r\n-connectSplideArrows(slider, name)\r\n-connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-}).mount()\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  // arrows: false,\r\n-  // pagination: false,\r\n-  // gap: '2rem',\r\n-  // type: 'loop',\r\n-  perPage: 3,\r\n-  // speed: 1500,\r\n-  // easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  // breakpoints: {\r\n-  //   747: {\r\n-  //     perPage: 2,\r\n-  //   },\r\n-  //   478: {\r\n-  //     perPage: 1,\r\n-  //   },\r\n-  // },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  // arrows: false,\r\n-  // pagination: false,\r\n-  // gap: '2rem',\r\n-  // type: 'loop',\r\n-  // perPage: 3,\r\n-  // speed: 1500,\r\n-  // easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  // breakpoints: {\r\n-  //   747: {\r\n-  //     perPage: 2,\r\n-  //   },\r\n-  //   478: {\r\n-  //     perPage: 1,\r\n-  //   },\r\n-  // },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.lib-item__slider')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  // easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.lib-item__slider')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.lib-item__slider')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-})\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide('.lib-item__slider', {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide('.lit-item__slider', {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {})\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {})\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705709886262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710059669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710283608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,97 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) =>\r\n+  el instanceof Document ||\r\n+  el instanceof\r\n+    Element[('article', 'blog', 'podcast', 'news')].forEach((el_) => {\r\n+      const el = sel('.slider--' + el_)\r\n+      const name = 'lib-item'\r\n+      addSplideClasses(el)\r\n+\r\n+      const slider = new Splide(el, {\r\n+        arrows: false,\r\n+        pagination: false,\r\n+        gap: '2rem',\r\n+        type: 'loop',\r\n+        perPage: 3,\r\n+        perMove: 3,\r\n+        speed: 1500,\r\n+        easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+        breakpoints: {\r\n+          747: {\r\n+            perPage: 2,\r\n+          },\r\n+          478: {\r\n+            perPage: 1,\r\n+          },\r\n+        },\r\n+      }).mount()\r\n+      l(slider)\r\n+\r\n+      connectSplideArrows(slider, el, name)\r\n+      connectSplideBullets(slider, el, name)\r\n+    })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710332616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) =>\r\n+  el instanceof Document ||\r\n+  el instanceof\r\n+    Element[('article', 'blog', 'podcast', 'news')].forEach((el_) => {\r\n+      const el = sel('.slider--' + el_)\r\n+      l(el)\r\n+      const name = 'lib-item'\r\n+      addSplideClasses(el)\r\n+\r\n+      const slider = new Splide(el, {\r\n+        arrows: false,\r\n+        pagination: false,\r\n+        gap: '2rem',\r\n+        type: 'loop',\r\n+        perPage: 3,\r\n+        perMove: 3,\r\n+        speed: 1500,\r\n+        easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+        breakpoints: {\r\n+          747: {\r\n+            perPage: 2,\r\n+          },\r\n+          478: {\r\n+            perPage: 1,\r\n+          },\r\n+        },\r\n+      }).mount()\r\n+      l(slider)\r\n+\r\n+      connectSplideArrows(slider, el, name)\r\n+      connectSplideBullets(slider, el, name)\r\n+    })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710356987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710758862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.options.perPage)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710788322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.options.perPage)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / slider.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710794293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.options.perPage)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710976849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.options.perPage)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index / splide.options.perPage + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711320152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index / splide.options.perPage + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711509882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${slider$.page + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711541611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.page)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${slider$.page + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711684402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${slider$.page + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711767392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    const ind = splide.toPage(splide.index)\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711899325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    const ind = splide.toPage(splide.index)\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711909098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(4))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    const ind = splide.toPage(splide.index)\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711916424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    const ind = splide.toPage(splide.index)\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705712002658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,101 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705712056329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,101 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705712071026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,101 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705712077096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,101 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705712103365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,101 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713009941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el_) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const el = el_\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713066592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713235149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713495169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713514140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n   // let bulletPressed = false\r\n   if (splide.length > 1) {\r\n     const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n     let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n       let clone$ = bullet$.cloneNode(true)\r\n       clone$.addEventListener('click', (e) => {\r\n         // bulletPressed = true\r\n         splide.go(i)\r\n@@ -99,2559 +99,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el_) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const el = el_\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    const ind = splide.toPage(splide.index)\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(4))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    const ind = splide.toPage(splide.index)\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    const ind = splide.toPage(splide.index)\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    const ind = splide.toPage(splide.index)\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${slider$.page + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.page)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${slider$.page + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${slider$.page + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index / splide.options.perPage + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.options.perPage)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index / splide.options.perPage + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.options.perPage)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.options.perPage)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / slider.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.options.perPage)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) =>\r\n-  el instanceof Document ||\r\n-  el instanceof\r\n-    Element[('article', 'blog', 'podcast', 'news')].forEach((el_) => {\r\n-      const el = sel('.slider--' + el_)\r\n-      l(el)\r\n-      const name = 'lib-item'\r\n-      addSplideClasses(el)\r\n-\r\n-      const slider = new Splide(el, {\r\n-        arrows: false,\r\n-        pagination: false,\r\n-        gap: '2rem',\r\n-        type: 'loop',\r\n-        perPage: 3,\r\n-        perMove: 3,\r\n-        speed: 1500,\r\n-        easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-        breakpoints: {\r\n-          747: {\r\n-            perPage: 2,\r\n-          },\r\n-          478: {\r\n-            perPage: 1,\r\n-          },\r\n-        },\r\n-      }).mount()\r\n-      l(slider)\r\n-\r\n-      connectSplideArrows(slider, el, name)\r\n-      connectSplideBullets(slider, el, name)\r\n-    })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) =>\r\n-  el instanceof Document ||\r\n-  el instanceof\r\n-    Element[('article', 'blog', 'podcast', 'news')].forEach((el_) => {\r\n-      const el = sel('.slider--' + el_)\r\n-      const name = 'lib-item'\r\n-      addSplideClasses(el)\r\n-\r\n-      const slider = new Splide(el, {\r\n-        arrows: false,\r\n-        pagination: false,\r\n-        gap: '2rem',\r\n-        type: 'loop',\r\n-        perPage: 3,\r\n-        perMove: 3,\r\n-        speed: 1500,\r\n-        easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-        breakpoints: {\r\n-          747: {\r\n-            perPage: 2,\r\n-          },\r\n-          478: {\r\n-            perPage: 1,\r\n-          },\r\n-        },\r\n-      }).mount()\r\n-      l(slider)\r\n-\r\n-      connectSplideArrows(slider, el, name)\r\n-      connectSplideBullets(slider, el, name)\r\n-    })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705713533926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713541290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713568512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i*splide.options.perPage))\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713573706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n       let clone$ = bullet$.cloneNode(true)\r\n       clone$.addEventListener('click', (e) => {\r\n         // bulletPressed = true\r\n-        splide.go(i*splide.options.perPage))\r\n+        splide.go(i * splide.options.perPage)\r\n       })\r\n       fragment.appendChild(clone$)\r\n     }\r\n     fragment.firstChild.classList.add('bullet--active')\r\n@@ -99,310 +99,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705713625942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713711881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713895800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705718678179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705718743117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+// lib-filter__dd--content\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705719505371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,139 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(el_) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + el_)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+// lib-filter__dd--content\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value === 'all') {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705719629964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,141 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+// lib-filter__dd--content\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value === 'all') {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705719649716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+// lib-filter__dd--content\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value === 'all') {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705719688469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+// lib-filter__dd--content\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705720121693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,8 @@\n       el.classList.add('hide')\r\n     }\r\n   })\r\n }\r\n-// lib-filter__dd--content\r\n contentDd$.addEventListener('change', (e) => {\r\n   l(e.target.value)\r\n   switch (e.target.value) {\r\n     case 'blog':\r\n@@ -48,8 +47,12 @@\n       })\r\n   }\r\n })\r\n \r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+})\r\n+\r\n // ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n selAll('.lib-item__slider').forEach((el) => {\r\n   // const el = sel('.slider--' + el_)\r\n   const name = 'lib-item'\r\n"
                },
                {
                    "date": 1705720250132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    el.classList.remove('hide')\r\n+  })\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705720323258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+  // selAll('.lib-item').forEach((el) => {\r\n+  //   el.classList.remove('hide')\r\n+  // })\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705721931371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Eleme
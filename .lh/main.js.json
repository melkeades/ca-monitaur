{
    "sourceFile": "main.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 334,
            "patches": [
                {
                    "date": 1705702366562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1705705711780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,4 +8,65 @@\n const selAll = (e) => document.querySelectorAll(e)\r\n const l = (e) => console.log(e)\r\n \r\n l('qwe')\r\n+selAll('.lib-item__slider').forEach((el$) => {\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  connectSplideArrows(ourWorkInfoSlider, name)\r\n+  connectSplideBullets(ourWorkInfoSlider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705705900905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,5 @@\n import Splide from '@splidejs/splide'\r\n-import { AutoScroll } from '@splidejs/splide-extension-auto-scroll'\r\n-import { Intersection } from '@splidejs/splide-extension-intersection'\r\n import '@splidejs/splide/css'\r\n import './style.styl'\r\n \r\n const sel = (e) => document.querySelector(e)\r\n@@ -12,10 +10,25 @@\n selAll('.lib-item__slider').forEach((el$) => {\r\n   const name = 'lib-item'\r\n   addSplideClasses(name + '__slider')\r\n \r\n-  connectSplideArrows(ourWorkInfoSlider, name)\r\n-  connectSplideBullets(ourWorkInfoSlider, name)\r\n+  const slider = new Splide(ourWorkInfoSlider$, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n })\r\n \r\n export function onDomReady(run) {\r\n   if (document.readyState !== 'loading') {\r\n"
                },
                {
                    "date": 1705705947964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el$) => {\r\n+  l('qwe')\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  const slider = new Splide(ourWorkInfoSlider$, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706039984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \r\n   const name = 'lib-item'\r\n   addSplideClasses(name + '__slider')\r\n \r\n-  const slider = new Splide(ourWorkInfoSlider$, {\r\n+  const slider = new Splide(el$, {\r\n     arrows: false,\r\n     pagination: false,\r\n     gap: '2rem',\r\n     // type: 'loop',\r\n@@ -83,89 +83,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-l('qwe')\r\n-selAll('.lib-item__slider').forEach((el$) => {\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  const slider = new Splide(ourWorkInfoSlider$, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705706075495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n const selAll = (e) => document.querySelectorAll(e)\r\n const l = (e) => console.log(e)\r\n \r\n selAll('.lib-item__slider').forEach((el$) => {\r\n-  l('qwe')\r\n+  l('qwe', el$)\r\n \r\n   const name = 'lib-item'\r\n   addSplideClasses(name + '__slider')\r\n \r\n"
                },
                {
                    "date": 1705706161556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el$) => {\r\n+  l('qwe', el$)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  const slider = new Splide(el$, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706185603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el$) => {\r\n+  l('l', el$)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  const slider = new Splide(el$, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706260101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el$) => {\r\n+  l('l', el$)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706274732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el$) => {\r\n+  l('l', el$)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706319348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l', el)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706402064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (e) => console.log(...e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l', el)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706416320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l', el)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706462379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l')\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706467713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l', el)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706803614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l', el)\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706815936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l('l', isEl(el))\r\n+\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  const splide = document.querySelector('.' + slider)\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705706942911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,11 @@\n \r\n const sel = (e) => document.querySelector(e)\r\n const selAll = (e) => document.querySelectorAll(e)\r\n const l = (...e) => console.log(...e)\r\n-const isEl = (el) => el instanceof Document || el instanceof Element\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n \r\n selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l', isEl(el))\r\n-\r\n   const name = 'lib-item'\r\n   addSplideClasses(name + '__slider')\r\n \r\n   // const slider = new Splide(el$, {\r\n@@ -75,9 +73,13 @@\n     splide.go('>')\r\n   })\r\n }\r\n export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n+  if (typeof slider === 'string') {\r\n+    const splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    const splide = slider\r\n+  }\r\n   const track = splide.children[0]\r\n   const list = track.children[0]\r\n   const slide = list.childNodes\r\n   splide.classList.add('splide')\r\n"
                },
                {
                    "date": 1705706977152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707026129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(name + '__slider')\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707048551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  // const slider = new Splide(el$, {\r\n+  //   arrows: false,\r\n+  //   pagination: false,\r\n+  //   gap: '2rem',\r\n+  //   // type: 'loop',\r\n+  //   perPage: 3,\r\n+  //   speed: 1500,\r\n+  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  //   breakpoints: {\r\n+  //     747: {\r\n+  //       autoplay: false,\r\n+  //     },\r\n+  //   },\r\n+  // })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707066307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el$, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707078852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707099722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n       },\r\n     },\r\n   })\r\n \r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n })\r\n \r\n export function onDomReady(run) {\r\n   if (document.readyState !== 'loading') {\r\n@@ -88,1403 +88,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el$, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  if (typeof slider === 'string') {\r\n-    const splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    const splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l', el)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l', el)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l')\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l', el)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(...e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l', el)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l('l', el)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el$) => {\r\n-  l('l', el$)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el$) => {\r\n-  l('l', el$)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  // const slider = new Splide(el$, {\r\n-  //   arrows: false,\r\n-  //   pagination: false,\r\n-  //   gap: '2rem',\r\n-  //   // type: 'loop',\r\n-  //   perPage: 3,\r\n-  //   speed: 1500,\r\n-  //   easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  //   breakpoints: {\r\n-  //     747: {\r\n-  //       autoplay: false,\r\n-  //     },\r\n-  //   },\r\n-  // })\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el$) => {\r\n-  l('l', el$)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  const slider = new Splide(el$, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el$) => {\r\n-  l('qwe', el$)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  const slider = new Splide(el$, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (e) => console.log(e)\r\n-\r\n-selAll('.lib-item__slider').forEach((el$) => {\r\n-  l('qwe', el$)\r\n-\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(name + '__slider')\r\n-\r\n-  const slider = new Splide(el$, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  const splide = document.querySelector('.' + slider)\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705707149999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        autoplay: false,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707164959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   const slider = new Splide(el, {\r\n     arrows: false,\r\n     pagination: false,\r\n     gap: '2rem',\r\n-    // type: 'loop',\r\n+    type: 'loop',\r\n     perPage: 3,\r\n     speed: 1500,\r\n     easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n     breakpoints: {\r\n"
                },
                {
                    "date": 1705707185962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707359265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707415848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {})\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707421582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {})\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707440896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   addSplideClasses(el)\r\n \r\n   const slider = new Splide(el, {})\r\n \r\n-  // connectSplideArrows(slider, name)\r\n+  connectSplideArrows(slider, name)\r\n   // connectSplideBullets(slider, name)\r\n })\r\n \r\n export function onDomReady(run) {\r\n"
                },
                {
                    "date": 1705707501225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide('.lit-item__slider', {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707508890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide('.lib-item__slider', {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  })\r\n+\r\n+  // connectSplideArrows(slider, name)\r\n+  // connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705707578295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,95 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.lib-item__slider')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+})\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708491841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.lib-item__slider')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708558619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.lib-item__slider')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  // easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708785946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708824254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708831391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708867772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  // arrows: false,\r\n+  // pagination: false,\r\n+  // gap: '2rem',\r\n+  // type: 'loop',\r\n+  // perPage: 3,\r\n+  // speed: 1500,\r\n+  // easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  // breakpoints: {\r\n+  //   747: {\r\n+  //     perPage: 2,\r\n+  //   },\r\n+  //   478: {\r\n+  //     perPage: 1,\r\n+  //   },\r\n+  // },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708875876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  // arrows: false,\r\n+  // pagination: false,\r\n+  // gap: '2rem',\r\n+  // type: 'loop',\r\n+  perPage: 3,\r\n+  // speed: 1500,\r\n+  // easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  // breakpoints: {\r\n+  //   747: {\r\n+  //     perPage: 2,\r\n+  //   },\r\n+  //   478: {\r\n+  //     perPage: 1,\r\n+  //   },\r\n+  // },\r\n+})\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708953436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+}).mount()\r\n+l(slider)\r\n+\r\n+// connectSplideArrows(slider, name)\r\n+// connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705708966065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+}).mount()\r\n+l(slider)\r\n+\r\n+connectSplideArrows(slider, name)\r\n+connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705709158282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,97 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// selAll('.lib-item__slider').forEach((el) => {\r\n+const el = sel('.test1')\r\n+l(isDomEl(el))\r\n+const name = 'lib-item'\r\n+addSplideClasses(el)\r\n+\r\n+const slider = new Splide(el, {\r\n+  arrows: false,\r\n+  pagination: false,\r\n+  gap: '2rem',\r\n+  type: 'loop',\r\n+  perPage: 3,\r\n+  perMove: 3,\r\n+  speed: 1500,\r\n+  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+  breakpoints: {\r\n+    747: {\r\n+      perPage: 2,\r\n+    },\r\n+    478: {\r\n+      perPage: 1,\r\n+    },\r\n+  },\r\n+}).mount()\r\n+l(slider)\r\n+\r\n+connectSplideArrows(slider, name)\r\n+connectSplideBullets(slider, name)\r\n+// })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705709227628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,97 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  const el = sel(el)\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705709280090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705709658872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n     },\r\n   }).mount()\r\n   l(slider)\r\n \r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n })\r\n \r\n export function onDomReady(run) {\r\n   if (document.readyState !== 'loading') {\r\n@@ -69,14 +69,14 @@\n     sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n     sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n   })\r\n }\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n     splide.go('<')\r\n   })\r\n \r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n     splide.go('>')\r\n   })\r\n }\r\n export function addSplideClasses(slider) {\r\n@@ -93,1868 +93,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  const el = sel(el)\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  perMove: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-}).mount()\r\n-l(slider)\r\n-\r\n-connectSplideArrows(slider, name)\r\n-connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-}).mount()\r\n-l(slider)\r\n-\r\n-connectSplideArrows(slider, name)\r\n-connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-}).mount()\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  // arrows: false,\r\n-  // pagination: false,\r\n-  // gap: '2rem',\r\n-  // type: 'loop',\r\n-  perPage: 3,\r\n-  // speed: 1500,\r\n-  // easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  // breakpoints: {\r\n-  //   747: {\r\n-  //     perPage: 2,\r\n-  //   },\r\n-  //   478: {\r\n-  //     perPage: 1,\r\n-  //   },\r\n-  // },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  // arrows: false,\r\n-  // pagination: false,\r\n-  // gap: '2rem',\r\n-  // type: 'loop',\r\n-  // perPage: 3,\r\n-  // speed: 1500,\r\n-  // easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  // breakpoints: {\r\n-  //   747: {\r\n-  //     perPage: 2,\r\n-  //   },\r\n-  //   478: {\r\n-  //     perPage: 1,\r\n-  //   },\r\n-  // },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.test1')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.lib-item__slider')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  // easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.lib-item__slider')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-})\r\n-l(slider)\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// selAll('.lib-item__slider').forEach((el) => {\r\n-const el = sel('.lib-item__slider')\r\n-l(isDomEl(el))\r\n-const name = 'lib-item'\r\n-addSplideClasses(el)\r\n-\r\n-const slider = new Splide(el, {\r\n-  arrows: false,\r\n-  pagination: false,\r\n-  gap: '2rem',\r\n-  type: 'loop',\r\n-  perPage: 3,\r\n-  speed: 1500,\r\n-  easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-  breakpoints: {\r\n-    747: {\r\n-      perPage: 2,\r\n-    },\r\n-    478: {\r\n-      perPage: 1,\r\n-    },\r\n-  },\r\n-})\r\n-\r\n-// connectSplideArrows(slider, name)\r\n-// connectSplideBullets(slider, name)\r\n-// })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide('.lib-item__slider', {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide('.lit-item__slider', {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {})\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {})\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  // connectSplideArrows(slider, name)\r\n-  // connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        autoplay: false,\r\n-      },\r\n-    },\r\n-  })\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705709886262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710059669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  l(isDomEl(el))\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710283608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,97 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) =>\r\n+  el instanceof Document ||\r\n+  el instanceof\r\n+    Element[('article', 'blog', 'podcast', 'news')].forEach((el_) => {\r\n+      const el = sel('.slider--' + el_)\r\n+      const name = 'lib-item'\r\n+      addSplideClasses(el)\r\n+\r\n+      const slider = new Splide(el, {\r\n+        arrows: false,\r\n+        pagination: false,\r\n+        gap: '2rem',\r\n+        type: 'loop',\r\n+        perPage: 3,\r\n+        perMove: 3,\r\n+        speed: 1500,\r\n+        easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+        breakpoints: {\r\n+          747: {\r\n+            perPage: 2,\r\n+          },\r\n+          478: {\r\n+            perPage: 1,\r\n+          },\r\n+        },\r\n+      }).mount()\r\n+      l(slider)\r\n+\r\n+      connectSplideArrows(slider, el, name)\r\n+      connectSplideBullets(slider, el, name)\r\n+    })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710332616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) =>\r\n+  el instanceof Document ||\r\n+  el instanceof\r\n+    Element[('article', 'blog', 'podcast', 'news')].forEach((el_) => {\r\n+      const el = sel('.slider--' + el_)\r\n+      l(el)\r\n+      const name = 'lib-item'\r\n+      addSplideClasses(el)\r\n+\r\n+      const slider = new Splide(el, {\r\n+        arrows: false,\r\n+        pagination: false,\r\n+        gap: '2rem',\r\n+        type: 'loop',\r\n+        perPage: 3,\r\n+        perMove: 3,\r\n+        speed: 1500,\r\n+        easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+        breakpoints: {\r\n+          747: {\r\n+            perPage: 2,\r\n+          },\r\n+          478: {\r\n+            perPage: 1,\r\n+          },\r\n+        },\r\n+      }).mount()\r\n+      l(slider)\r\n+\r\n+      connectSplideArrows(slider, el, name)\r\n+      connectSplideBullets(slider, el, name)\r\n+    })\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710356987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710758862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.options.perPage)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710788322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.options.perPage)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / slider.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710794293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.options.perPage)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705710976849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.options.perPage)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index / splide.options.perPage + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711320152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index / splide.options.perPage + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711509882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${slider$.page + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711541611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.page)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${slider$.page + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711684402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${slider$.page + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711767392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider)\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    const ind = splide.toPage(splide.index)\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711899325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    const ind = splide.toPage(splide.index)\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711909098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(4))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    const ind = splide.toPage(splide.index)\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705711916424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    const ind = splide.toPage(splide.index)\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705712002658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,101 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705712056329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,101 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705712071026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,101 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705712077096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,101 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705712103365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,101 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+  const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713009941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el_) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const el = el_\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713066592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713235149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713495169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713514140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n   // let bulletPressed = false\r\n   if (splide.length > 1) {\r\n     const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n     let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n       let clone$ = bullet$.cloneNode(true)\r\n       clone$.addEventListener('click', (e) => {\r\n         // bulletPressed = true\r\n         splide.go(i)\r\n@@ -99,2559 +99,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el_) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const el = el_\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    const ind = splide.toPage(splide.index)\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(4))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    const ind = splide.toPage(splide.index)\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    const ind = splide.toPage(splide.index)\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    const ind = splide.toPage(splide.index)\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${+1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${slider$.page + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.page)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${slider$.page + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${slider$.page + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index / splide.options.perPage + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.options.perPage)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index / splide.options.perPage + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.options.perPage)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / splide.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.options.perPage)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length / slider.options.perPage; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.options.perPage)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-  const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) =>\r\n-  el instanceof Document ||\r\n-  el instanceof\r\n-    Element[('article', 'blog', 'podcast', 'news')].forEach((el_) => {\r\n-      const el = sel('.slider--' + el_)\r\n-      l(el)\r\n-      const name = 'lib-item'\r\n-      addSplideClasses(el)\r\n-\r\n-      const slider = new Splide(el, {\r\n-        arrows: false,\r\n-        pagination: false,\r\n-        gap: '2rem',\r\n-        type: 'loop',\r\n-        perPage: 3,\r\n-        perMove: 3,\r\n-        speed: 1500,\r\n-        easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-        breakpoints: {\r\n-          747: {\r\n-            perPage: 2,\r\n-          },\r\n-          478: {\r\n-            perPage: 1,\r\n-          },\r\n-        },\r\n-      }).mount()\r\n-      l(slider)\r\n-\r\n-      connectSplideArrows(slider, el, name)\r\n-      connectSplideBullets(slider, el, name)\r\n-    })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) =>\r\n-  el instanceof Document ||\r\n-  el instanceof\r\n-    Element[('article', 'blog', 'podcast', 'news')].forEach((el_) => {\r\n-      const el = sel('.slider--' + el_)\r\n-      const name = 'lib-item'\r\n-      addSplideClasses(el)\r\n-\r\n-      const slider = new Splide(el, {\r\n-        arrows: false,\r\n-        pagination: false,\r\n-        gap: '2rem',\r\n-        type: 'loop',\r\n-        perPage: 3,\r\n-        perMove: 3,\r\n-        speed: 1500,\r\n-        easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-        breakpoints: {\r\n-          747: {\r\n-            perPage: 2,\r\n-          },\r\n-          478: {\r\n-            perPage: 1,\r\n-          },\r\n-        },\r\n-      }).mount()\r\n-      l(slider)\r\n-\r\n-      connectSplideArrows(slider, el, name)\r\n-      connectSplideBullets(slider, el, name)\r\n-    })\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  l(isDomEl(el))\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider)\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n-  let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < splide.length; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705713533926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713541290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713568512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i*splide.options.perPage))\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713573706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n       let clone$ = bullet$.cloneNode(true)\r\n       clone$.addEventListener('click', (e) => {\r\n         // bulletPressed = true\r\n-        splide.go(i*splide.options.perPage))\r\n+        splide.go(i * splide.options.perPage)\r\n       })\r\n       fragment.appendChild(clone$)\r\n     }\r\n     fragment.firstChild.classList.add('bullet--active')\r\n@@ -99,310 +99,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705713625942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713711881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const ind = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    l(ind)\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705713895800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    // const ind = splide.index / splide.options.perPage\r\n+    // const ind = splide.toPage(splide.index)\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705718678179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705718743117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+// lib-filter__dd--content\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705719505371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,139 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(el_) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + el_)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+// lib-filter__dd--content\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value === 'all') {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705719629964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,141 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+// lib-filter__dd--content\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value === 'all') {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705719649716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+// lib-filter__dd--content\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value === 'all') {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705719688469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+// lib-filter__dd--content\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705720121693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,8 @@\n       el.classList.add('hide')\r\n     }\r\n   })\r\n }\r\n-// lib-filter__dd--content\r\n contentDd$.addEventListener('change', (e) => {\r\n   l(e.target.value)\r\n   switch (e.target.value) {\r\n     case 'blog':\r\n@@ -48,8 +47,12 @@\n       })\r\n   }\r\n })\r\n \r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+})\r\n+\r\n // ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n selAll('.lib-item__slider').forEach((el) => {\r\n   // const el = sel('.slider--' + el_)\r\n   const name = 'lib-item'\r\n"
                },
                {
                    "date": 1705720250132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    el.classList.remove('hide')\r\n+  })\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705720323258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+  // selAll('.lib-item').forEach((el) => {\r\n+  //   el.classList.remove('hide')\r\n+  // })\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705721931371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705761568460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    console.log('cmsfilter Successfully loaded!')\r\n+\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      console.log(renderedItems)\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705762128000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,167 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    console.log('cmsfilter Successfully loaded!')\r\n+\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        slider.Components.Controller.toPage(1)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705762157611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    console.log('cmsfilter Successfully loaded!')\r\n+\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        l(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705763682767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    console.log('cmsfilter Successfully loaded!')\r\n+\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        slider.go(1)\r\n+        // l(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705763737794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    console.log('cmsfilter Successfully loaded!')\r\n+\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        // l(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705763789801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    console.log('cmsfilter Successfully loaded!')\r\n+\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        slider.go(1)\r\n+        // l(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705763906246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,178 +67,10 @@\n     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n       // console.log(renderedItems)\r\n       sliders.forEach((slider) => {\r\n         // slider.Components.Controller.toPage(1)\r\n-        slider.go(1)\r\n-        // l(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    console.log('cmsfilter Successfully loaded!')\r\n-\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        slider.Components.Controller.toPage(1)\r\n         // slider.go(1)\r\n+        slider.refresh()\r\n         // l(slider)\r\n       })\r\n     })\r\n   },\r\n@@ -335,2299 +167,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    console.log('cmsfilter Successfully loaded!')\r\n-\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        slider.go(1)\r\n-        // l(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    console.log('cmsfilter Successfully loaded!')\r\n-\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        l(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    console.log('cmsfilter Successfully loaded!')\r\n-\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        slider.Components.Controller.toPage(1)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    console.log('cmsfilter Successfully loaded!')\r\n-\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      console.log(renderedItems)\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-  // selAll('.lib-item').forEach((el) => {\r\n-  //   el.classList.remove('hide')\r\n-  // })\r\n-})\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    el.classList.remove('hide')\r\n-  })\r\n-})\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-})\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-// lib-filter__dd--content\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value === 'all') {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-// lib-filter__dd--content\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value === 'all') {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-function toggleItems(el_) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + el_)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-// lib-filter__dd--content\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value === 'all') {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-// lib-filter__dd--content\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-})\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-})\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.floor(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    // const ind = splide.index / splide.options.perPage\r\n-    // const ind = splide.toPage(splide.index)\r\n-    const ind = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    l(ind)\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${ind + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705764043887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        l(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705764209313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        l(slider.root)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705764266973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  l(slider$, splide.root)\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705764328679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705764416016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, sliderPrefix)\r\n+  connectSplideBullets(slider, el, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705764463921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705764473293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,11 +141,9 @@\n     slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n     slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n   })\r\n }\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n   slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n     splide.go('<')\r\n   })\r\n \r\n"
                },
                {
                    "date": 1705764486866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,167 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, slider$, classPrefix) {\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705764534140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705764629565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  l(slider$)\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705764803408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, el, name)\r\n+  connectSplideBullets(slider, el, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  l(slider$)\r\n+  const classPrefix = 'lib-item'\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705764899269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  l(slider$)\r\n+  const classPrefix = 'lib-item'\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705764932864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  const name = 'lib-item'\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, name)\r\n+  connectSplideBullets(slider, name)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  l(slider$)\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, slider$, classPrefix) {\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705764965856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,1192 +142,10 @@\n     slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n     slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n   })\r\n }\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  l(slider$)\r\n-  const classPrefix = 'lib-item'\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  l(slider$)\r\n-  const classPrefix = 'lib-item'\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  l(slider$)\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, sliderPrefix)\r\n-  connectSplideBullets(slider, el, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n export function connectSplideArrows(splide, classPrefix) {\r\n   const slider$ = splide.root\r\n-\r\n   slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n     splide.go('<')\r\n   })\r\n \r\n@@ -1349,848 +167,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  l(slider$, splide.root)\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        l(slider.root)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        l(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    console.log('cmsfilter Successfully loaded!')\r\n-\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        // l(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, el, name)\r\n-  connectSplideBullets(slider, el, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, slider$, classPrefix) {\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, slider$, classPrefix) {\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705765095066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  connectSplideArrows(slider, sliderPrefix)\r\n+  connectSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function connectSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  l(slider$)\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function connectSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705765296055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideArrows(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  l(slider$)\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705765549754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideArrows(slider, sliderPrefix)\r\n+        l('ff')\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  l(slider$)\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  if (splide.length > 1) {\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    pagination$.replaceChildren()\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705765597364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,8 @@\n         // slider.Components.Controller.toPage(1)\r\n         // slider.go(1)\r\n         slider.refresh()\r\n         initSplideArrows(slider, sliderPrefix)\r\n-        l('ff')\r\n       })\r\n     })\r\n   },\r\n ])\r\n@@ -117,9 +116,9 @@\n   }\r\n }\r\n export function initSplideBullets(splide, classPrefix) {\r\n   const slider$ = splide.root\r\n-  l(slider$)\r\n+  l('ff')\r\n   // parse bullets inside the container and repopulate\r\n   const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n   // let bulletPressed = false\r\n   if (splide.length > 1) {\r\n@@ -169,515 +168,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideArrows(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  l(slider$)\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, sliderPrefix)\r\n-  connectSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  l(slider$)\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  const name = 'lib-item'\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  connectSplideArrows(slider, name)\r\n-  connectSplideBullets(slider, name)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function connectSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  l(slider$)\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    pagination$.replaceChildren()\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function connectSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705765640167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n       sliders.forEach((slider) => {\r\n         // slider.Components.Controller.toPage(1)\r\n         // slider.go(1)\r\n         slider.refresh()\r\n-        initSplideArrows(slider, sliderPrefix)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n       })\r\n     })\r\n   },\r\n ])\r\n"
                },
                {
                    "date": 1705765783095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,10 @@\n     }\r\n     fragment.firstChild.classList.add('bullet--active')\r\n     pagination$.replaceChildren(fragment)\r\n   } else {\r\n-    pagination$.replaceChildren()\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n   }\r\n   splide.on('move', function (newIndex, oldIndex) {\r\n     const index = splide.Components.Controller.toPage(splide.index)\r\n \r\n"
                },
                {
                    "date": 1705765798112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,8 +121,10 @@\n   // parse bullets inside the container and repopulate\r\n   const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n   // let bulletPressed = false\r\n   if (splide.length > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+\r\n     const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n     let fragment = document.createDocumentFragment()\r\n     for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n       let clone$ = bullet$.cloneNode(true)\r\n"
                },
                {
                    "date": 1705765873408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n   l('ff')\r\n   // parse bullets inside the container and repopulate\r\n   const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n   // let bulletPressed = false\r\n-  if (splide.length > 1) {\r\n+  if (splide.length > 2) {\r\n     pagination$.style.visibility = 'visible'\r\n \r\n     const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n     let fragment = document.createDocumentFragment()\r\n"
                },
                {
                    "date": 1705765951763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,14 +120,15 @@\n   l('ff')\r\n   // parse bullets inside the container and repopulate\r\n   const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n   // let bulletPressed = false\r\n-  if (splide.length > 2) {\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n     pagination$.style.visibility = 'visible'\r\n \r\n     const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n     let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < Math.ceil(splide.length / splide.options.perPage); i++) {\r\n+    for (let i = 0; i < pages; i++) {\r\n       let clone$ = bullet$.cloneNode(true)\r\n       clone$.addEventListener('click', (e) => {\r\n         // bulletPressed = true\r\n         splide.go(i * splide.options.perPage)\r\n"
                },
                {
                    "date": 1705766169068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  l('ff')\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`${classPrefix}__arrows`).style.visibility = 'visible'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705766190119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  l('ff')\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705766348257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  l('ff')\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  // let bulletPressed = false\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        // bulletPressed = true\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705766361116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n   // let bulletPressed = false\r\n   const pages = Math.ceil(splide.length / splide.options.perPage)\r\n   if (pages > 1) {\r\n     pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`${classPrefix}__arrows`).style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n \r\n     const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n     let fragment = document.createDocumentFragment()\r\n     for (let i = 0; i < pages; i++) {\r\n"
                },
                {
                    "date": 1705766471421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      747: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  l('ff')\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705766591901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  l('f')\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    l(el)\r\n+\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  l(e.target.value)\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+  l(slider.Components.Controller.toPage(1))\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  l('ff')\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705766680191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go(i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705767095796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i * splide.options.perPage)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705767104059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705768168471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handlePrev = (e) => e.go('<')\r\n+  const handleNext = (e) => e.go('>')\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705768332106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,167 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handlePrev = (e) => e.go('<')\r\n+  const handleNext = (e) => e.go('>')\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', handleNext(splide))\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705768403302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,11 @@\n   const handleNext = (e) => e.go('>')\r\n   const slider$ = splide.root\r\n   slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n \r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', handleNext(splide))\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n }\r\n export function addSplideClasses(slider) {\r\n   let splide\r\n   if (typeof slider === 'string') {\r\n"
                },
                {
                    "date": 1705768875883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handlePrev = (e) => {l('f') e.go('<') }\r\n+  const handleNext = (e) => e.go('>')\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705768907684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,178 +142,12 @@\n     slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n   })\r\n }\r\n export function initSplideArrows(splide, classPrefix) {\r\n-  const handlePrev = (e) => {l('f') e.go('<') }\r\n-  const handleNext = (e) => e.go('>')\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n+  function handlePrev(e) {\r\n+    l('f')\r\n+    e.go('<')\r\n   }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const handlePrev = (e) => e.go('<')\r\n   const handleNext = (e) => e.go('>')\r\n   const slider$ = splide.root\r\n   slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n \r\n@@ -335,1738 +169,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const handlePrev = (e) => e.go('<')\r\n-  const handleNext = (e) => e.go('>')\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  l('ff')\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  l('ff')\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  l('ff')\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  l('ff')\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  l('ff')\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`${classPrefix}__arrows`).style.visibility = 'visible'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  l('f')\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    l(el)\r\n-\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  l(e.target.value)\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      747: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-  l(slider.Components.Controller.toPage(1))\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  l('ff')\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  // let bulletPressed = false\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        // bulletPressed = true\r\n-        splide.go(i * splide.options.perPage)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705768943213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+function handlePrev(e) {\r\n+  l('f')\r\n+  e.go('<')\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handleNext = (e) => e.go('>')\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705768967015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,184 +141,12 @@\n     slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n     slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n   })\r\n }\r\n-function handlePrev(e) {\r\n-  l('f')\r\n-  e.go('<')\r\n-}\r\n export function initSplideArrows(splide, classPrefix) {\r\n-  const handleNext = (e) => e.go('>')\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  function handlePrev(e) {\r\n+  const handlePrev = (e) => {\r\n     l('f')\r\n-    e.go('<')\r\n+    // e.go('<')\r\n   }\r\n   const handleNext = (e) => e.go('>')\r\n   const slider$ = splide.root\r\n   slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n"
                },
                {
                    "date": 1705768984847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n   })\r\n }\r\n export function initSplideArrows(splide, classPrefix) {\r\n   const handlePrev = (e) => {\r\n-    l('f')\r\n+    l('pr')\r\n     // e.go('<')\r\n   }\r\n   const handleNext = (e) => e.go('>')\r\n   const slider$ = splide.root\r\n"
                },
                {
                    "date": 1705769033464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handlePrev = (e) => {\r\n+    console.log('pr')\r\n+    // e.go('<')\r\n+  }\r\n+  const handleNext = (e) => e.go('>')\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705769082920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+const handlePrev = (e) => {\r\n+  console.log('pr')\r\n+  // e.go('<')\r\n+}\r\n+\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handleNext = (e) => e.go('>')\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705769115760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+function handlePrev(e) {\r\n+  console.log('pr')\r\n+  // e.go('<')\r\n+}\r\n+\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handleNext = (e) => e.go('>')\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705769219239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+function handlePrev(e) {\r\n+  console.log('pr')\r\n+  // e.go('<')\r\n+}\r\n+\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handleNext = (e) => e.go('>')\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev)\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705769568035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,15 +141,11 @@\n     slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n     slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n   })\r\n }\r\n-function handlePrev(e) {\r\n-  console.log('pr')\r\n-  // e.go('<')\r\n-}\r\n-\r\n export function initSplideArrows(splide, classPrefix) {\r\n-  const handleNext = (e) => e.go('>')\r\n+  const handlePrev = (e) => splide.go('<')\r\n+  const handleNext = (e) => splide.go('>')\r\n   const slider$ = splide.root\r\n   slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev)\r\n \r\n   slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n@@ -170,694 +166,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-function handlePrev(e) {\r\n-  console.log('pr')\r\n-  // e.go('<')\r\n-}\r\n-\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const handleNext = (e) => e.go('>')\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-const handlePrev = (e) => {\r\n-  console.log('pr')\r\n-  // e.go('<')\r\n-}\r\n-\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const handleNext = (e) => e.go('>')\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const handlePrev = (e) => {\r\n-    console.log('pr')\r\n-    // e.go('<')\r\n-  }\r\n-  const handleNext = (e) => e.go('>')\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const handlePrev = (e) => {\r\n-    l('pr')\r\n-    // e.go('<')\r\n-  }\r\n-  const handleNext = (e) => e.go('>')\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev(splide))\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705769611780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,167 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handlePrev = (e) => splide.go('<')\r\n+  const handleNext = (e) => splide.go('>')\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev)\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', handleNext)\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705769623963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,167 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handlePrev = () => splide.go('<')\r\n+  const handleNext = () => splide.go('>')\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev)\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', handleNext)\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705769742956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handlePrev = () => splide.go('<')\r\n+  const handleNext = () => splide.go('>')\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).removeEventListener('pointerdown', handlePrev).addEventListener('pointerdown', handlePrev)\r\n+\r\n+  slider$\r\n+    .querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`)\r\n+    .removeEventListener('pointerdown', handleNext)\r\n+    .addEventListener('pointerdown', handleNext)\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705769879665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handlePrev = () => splide.go('<')\r\n+  const handleNext = () => splide.go('>')\r\n+  const slider$ = splide.root\r\n+  const leftArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow--left`)\r\n+  leftArrow$.removeEventListener('pointerdown', handlePrev)\r\n+  leftArrow$.addEventListener('pointerdown', handlePrev)\r\n+\r\n+  const rightArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`)\r\n+  rightArrow$.removeEventListener('pointerdown', handleNext)\r\n+  rightArrow$.addEventListener('pointerdown', handleNext)\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705769921737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+        initSplideArrows(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handlePrev = () => splide.go('<')\r\n+  const handleNext = () => splide.go('>')\r\n+  const slider$ = splide.root\r\n+  const leftArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow--left`)\r\n+  leftArrow$.removeEventListener('pointerdown', handlePrev)\r\n+  leftArrow$.addEventListener('pointerdown', handlePrev)\r\n+\r\n+  const rightArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`)\r\n+  rightArrow$.removeEventListener('pointerdown', handleNext)\r\n+  rightArrow$.addEventListener('pointerdown', handleNext)\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705770017938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+        initSplideArrows(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const handlePrev = (e) => {\r\n+    l(e)\r\n+    splide.go('<')\r\n+  }\r\n+  const handleNext = (e) => splide.go('>')\r\n+  const slider$ = splide.root\r\n+  const leftArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow--left`)\r\n+  leftArrow$.removeEventListener('pointerdown', handlePrev)\r\n+  leftArrow$.addEventListener('pointerdown', handlePrev)\r\n+\r\n+  const rightArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`)\r\n+  rightArrow$.removeEventListener('pointerdown', handleNext)\r\n+  rightArrow$.addEventListener('pointerdown', handleNext)\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705770592506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+        initSplideArrows(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  // const handlePrev = (e) => { splide.go('<') }\r\n+  // const handleNext = (e) => splide.go('>')\r\n+  const slider$ = splide.root\r\n+  const leftArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow--left`)\r\n+  leftArrow$.onpointerdown = (e) => splide.go('<')\r\n+  // leftArrow$.addEventListener('pointerdown', handlePrev)\r\n+\r\n+  const rightArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`)\r\n+  rightArrow$.onpointerdown = (e) => splide.go('>')\r\n+\r\n+  // rightArrow$.addEventListener('pointerdown', handleNext)\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705770640287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+        // initSplideArrows(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  // const handlePrev = (e) => { splide.go('<') }\r\n+  // const handleNext = (e) => splide.go('>')\r\n+  const slider$ = splide.root\r\n+  const leftArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow--left`)\r\n+  leftArrow$.onpointerdown = (e) => splide.go('<')\r\n+  // leftArrow$.addEventListener('pointerdown', handlePrev)\r\n+\r\n+  const rightArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`)\r\n+  rightArrow$.onpointerdown = (e) => splide.go('>')\r\n+\r\n+  // rightArrow$.addEventListener('pointerdown', handleNext)\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705770711869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705770764038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705770836900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        slider.go(1)\r\n+        slider.refresh()\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705770864779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,10 +62,10 @@\n     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n       // console.log(renderedItems)\r\n       sliders.forEach((slider) => {\r\n         // slider.Components.Controller.toPage(1)\r\n+        slider.refresh()\r\n         slider.go(1)\r\n-        slider.refresh()\r\n         initSplideBullets(slider, sliderPrefix)\r\n       })\r\n     })\r\n   },\r\n@@ -166,1879 +166,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-        // initSplideArrows(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  // const handlePrev = (e) => { splide.go('<') }\r\n-  // const handleNext = (e) => splide.go('>')\r\n-  const slider$ = splide.root\r\n-  const leftArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow--left`)\r\n-  leftArrow$.onpointerdown = (e) => splide.go('<')\r\n-  // leftArrow$.addEventListener('pointerdown', handlePrev)\r\n-\r\n-  const rightArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`)\r\n-  rightArrow$.onpointerdown = (e) => splide.go('>')\r\n-\r\n-  // rightArrow$.addEventListener('pointerdown', handleNext)\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-        initSplideArrows(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  // const handlePrev = (e) => { splide.go('<') }\r\n-  // const handleNext = (e) => splide.go('>')\r\n-  const slider$ = splide.root\r\n-  const leftArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow--left`)\r\n-  leftArrow$.onpointerdown = (e) => splide.go('<')\r\n-  // leftArrow$.addEventListener('pointerdown', handlePrev)\r\n-\r\n-  const rightArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`)\r\n-  rightArrow$.onpointerdown = (e) => splide.go('>')\r\n-\r\n-  // rightArrow$.addEventListener('pointerdown', handleNext)\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-        initSplideArrows(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const handlePrev = (e) => {\r\n-    l(e)\r\n-    splide.go('<')\r\n-  }\r\n-  const handleNext = (e) => splide.go('>')\r\n-  const slider$ = splide.root\r\n-  const leftArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow--left`)\r\n-  leftArrow$.removeEventListener('pointerdown', handlePrev)\r\n-  leftArrow$.addEventListener('pointerdown', handlePrev)\r\n-\r\n-  const rightArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`)\r\n-  rightArrow$.removeEventListener('pointerdown', handleNext)\r\n-  rightArrow$.addEventListener('pointerdown', handleNext)\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-        initSplideArrows(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const handlePrev = () => splide.go('<')\r\n-  const handleNext = () => splide.go('>')\r\n-  const slider$ = splide.root\r\n-  const leftArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow--left`)\r\n-  leftArrow$.removeEventListener('pointerdown', handlePrev)\r\n-  leftArrow$.addEventListener('pointerdown', handlePrev)\r\n-\r\n-  const rightArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`)\r\n-  rightArrow$.removeEventListener('pointerdown', handleNext)\r\n-  rightArrow$.addEventListener('pointerdown', handleNext)\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const handlePrev = () => splide.go('<')\r\n-  const handleNext = () => splide.go('>')\r\n-  const slider$ = splide.root\r\n-  const leftArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow--left`)\r\n-  leftArrow$.removeEventListener('pointerdown', handlePrev)\r\n-  leftArrow$.addEventListener('pointerdown', handlePrev)\r\n-\r\n-  const rightArrow$ = slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`)\r\n-  rightArrow$.removeEventListener('pointerdown', handleNext)\r\n-  rightArrow$.addEventListener('pointerdown', handleNext)\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const handlePrev = () => splide.go('<')\r\n-  const handleNext = () => splide.go('>')\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).removeEventListener('pointerdown', handlePrev).addEventListener('pointerdown', handlePrev)\r\n-\r\n-  slider$\r\n-    .querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`)\r\n-    .removeEventListener('pointerdown', handleNext)\r\n-    .addEventListener('pointerdown', handleNext)\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const handlePrev = () => splide.go('<')\r\n-  const handleNext = () => splide.go('>')\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev)\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', handleNext)\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const handlePrev = (e) => splide.go('<')\r\n-  const handleNext = (e) => splide.go('>')\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev)\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', handleNext)\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // slider.go(1)\r\n-        slider.refresh()\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const handlePrev = (e) => splide.go('<')\r\n-  const handleNext = (e) => splide.go('>')\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', handlePrev)\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705770882540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  // const el = sel('.slider--' + el_)\r\n+  addSplideClasses(el)\r\n+\r\n+  const slider = new Splide(el, {\r\n+    arrows: false,\r\n+    pagination: false,\r\n+    gap: '2rem',\r\n+    // type: 'loop',\r\n+    // rewind: true,\r\n+    perPage: 3,\r\n+    perMove: 3,\r\n+    speed: 1500,\r\n+    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+    breakpoints: {\r\n+      991: {\r\n+        perPage: 2,\r\n+      },\r\n+      478: {\r\n+        perPage: 1,\r\n+      },\r\n+    },\r\n+  }).mount()\r\n+  sliders.push(slider)\r\n+\r\n+  initSplideArrows(slider, sliderPrefix)\r\n+  initSplideBullets(slider, sliderPrefix)\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705781636982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n   const slider = new Splide(el, {\r\n     arrows: false,\r\n     pagination: false,\r\n     gap: '2rem',\r\n-    // type: 'loop',\r\n+    type: 'loop',\r\n     // rewind: true,\r\n     perPage: 3,\r\n     perMove: 3,\r\n     speed: 1500,\r\n@@ -166,173 +166,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        slider.refresh()\r\n-        slider.go(1)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    // type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705781958281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n   // parse bullets inside the container and repopulate\r\n   const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n   const pages = Math.ceil(splide.length / splide.options.perPage)\r\n   if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n+    pagination$.style.maxHeight = '0px'\r\n     slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n \r\n     const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n     let fragment = document.createDocumentFragment()\r\n@@ -131,9 +131,9 @@\n     fragment.firstChild.classList.add('bullet--active')\r\n     pagination$.replaceChildren(fragment)\r\n   } else {\r\n     // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n+    pagination$.style.maxHeight = 'auto'\r\n     slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n   }\r\n   splide.on('move', function (newIndex, oldIndex) {\r\n     const index = splide.Components.Controller.toPage(splide.index)\r\n"
                },
                {
                    "date": 1705782027839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n   // parse bullets inside the container and repopulate\r\n   const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n   const pages = Math.ceil(splide.length / splide.options.perPage)\r\n   if (pages > 1) {\r\n-    pagination$.style.maxHeight = '0px'\r\n+    pagination$.style.visibility = 'visible'\r\n     slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n \r\n     const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n     let fragment = document.createDocumentFragment()\r\n@@ -131,9 +131,9 @@\n     fragment.firstChild.classList.add('bullet--active')\r\n     pagination$.replaceChildren(fragment)\r\n   } else {\r\n     // pagination$.replaceChildren()\r\n-    pagination$.style.maxHeight = 'auto'\r\n+    pagination$.style.visibility = 'hidden'\r\n     slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n   }\r\n   splide.on('move', function (newIndex, oldIndex) {\r\n     const index = splide.Components.Controller.toPage(splide.index)\r\n"
                },
                {
                    "date": 1705782118337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705787748508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,10 @@\n   // parse bullets inside the container and repopulate\r\n   const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n   const pages = Math.ceil(splide.length / splide.options.perPage)\r\n   if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n+    pagination$.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'visible'\r\n     slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n \r\n     const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n     let fragment = document.createDocumentFragment()\r\n@@ -133,9 +134,10 @@\n     fragment.firstChild.classList.add('bullet--active')\r\n     pagination$.replaceChildren(fragment)\r\n   } else {\r\n     // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n+    pagination$.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'hidden'\r\n     slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n   }\r\n   splide.on('move', function (newIndex, oldIndex) {\r\n     const index = splide.Components.Controller.toPage(splide.index)\r\n@@ -168,173 +170,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  // const el = sel('.slider--' + el_)\r\n-  addSplideClasses(el)\r\n-\r\n-  const slider = new Splide(el, {\r\n-    arrows: false,\r\n-    pagination: false,\r\n-    gap: '2rem',\r\n-    type: 'loop',\r\n-    // rewind: true,\r\n-    perPage: 3,\r\n-    perMove: 3,\r\n-    speed: 1500,\r\n-    easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-    breakpoints: {\r\n-      991: {\r\n-        perPage: 2,\r\n-      },\r\n-      478: {\r\n-        perPage: 1,\r\n-      },\r\n-    },\r\n-  }).mount()\r\n-  sliders.push(slider)\r\n-\r\n-  initSplideArrows(slider, sliderPrefix)\r\n-  initSplideBullets(slider, sliderPrefix)\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705787760343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705787948414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705788010800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705812987571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705862327414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+let qweTo = {}\r\n+l(setTimeout(() => {}, 1000))\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705862446817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+let qweTo = {}\r\n+l(typeof setTimeout(() => {}, 1000))\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705862465314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+let qweTo = {}\r\n+l(\r\n+  setTimeout(() => {}, 1000),\r\n+  'f'\r\n+)\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705862633963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+let refreshSliderTo\r\n+l\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        refreshSliderTo = setTimeout(() => {\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        }, 1000)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705862642021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+let refreshSliderTo\r\n+l\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        refreshSliderTo = setTimeout(() => {\r\n+          l('uo')\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        }, 1000)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705862804781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,8 @@\n \r\n const contentDd$ = sel('.lib-filter__dd--content')\r\n const sliderPrefix = 'lib-item'\r\n let sliders = []\r\n-let refreshSliderTo\r\n-l\r\n function toggleItems(_el) {\r\n   selAll('.lib-item').forEach((el) => {\r\n     if (el.classList.contains('lib-item--' + _el)) {\r\n       el.classList.remove('hide')\r\n@@ -52,366 +50,17 @@\n   contentDd$.value = 'all'\r\n   contentDd$.dispatchEvent(new Event('change'))\r\n })\r\n \r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        refreshSliderTo = setTimeout(() => {\r\n-          l('uo')\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        }, 1000)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n let refreshSliderTo\r\n-l\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        refreshSliderTo = setTimeout(() => {\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        }, 1000)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n+function refreshSlider(slider) {\r\n+  refreshSliderTo = setTimeout(() => {\r\n+    l('uo')\r\n+    slider.refresh()\r\n+    slider.go(0)\r\n     initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n+  }, 1000)\r\n }\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-let qweTo = {}\r\n-l(\r\n-  setTimeout(() => {}, 1000),\r\n-  'f'\r\n-)\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n window.fsAttributes = window.fsAttributes || []\r\n window.fsAttributes.push([\r\n   'cmsfilter',\r\n   (filterInstances) => {\r\n@@ -422,11 +71,9 @@\n     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n       // console.log(renderedItems)\r\n       sliders.forEach((slider) => {\r\n         // slider.Components.Controller.toPage(1)\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n+        refreshSlider(slider)\r\n       })\r\n     })\r\n   },\r\n ])\r\n@@ -530,1219 +177,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-let qweTo = {}\r\n-l(typeof setTimeout(() => {}, 1000))\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-let qweTo = {}\r\n-l(setTimeout(() => {}, 1000))\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705864686880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,18 @@\n   contentDd$.dispatchEvent(new Event('change'))\r\n })\r\n \r\n let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+  for (const mutation of mutationList) {\r\n+    if (mutation.type === 'childList') {\r\n+      l('ob')\r\n+    }\r\n+  }\r\n+})\r\n+selAll('.lib-item__slider').observe(filterSelect$, { childList: true, subtree: true })\r\n function refreshSlider(slider) {\r\n   refreshSliderTo = setTimeout(() => {\r\n     l('uo')\r\n     slider.refresh()\r\n@@ -71,9 +81,9 @@\n     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n       // console.log(renderedItems)\r\n       sliders.forEach((slider) => {\r\n         // slider.Components.Controller.toPage(1)\r\n-        refreshSlider(slider)\r\n+        // refreshSlider(slider)\r\n       })\r\n     })\r\n   },\r\n ])\r\n"
                },
                {
                    "date": 1705864752101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,11 @@\n       l('ob')\r\n     }\r\n   }\r\n })\r\n-selAll('.lib-item__slider').observe(filterSelect$, { childList: true, subtree: true })\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  observe(el, { childList: true, subtree: true })\r\n+})\r\n function refreshSlider(slider) {\r\n   refreshSliderTo = setTimeout(() => {\r\n     l('uo')\r\n     slider.refresh()\r\n"
                },
                {
                    "date": 1705864821966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,192 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+  for (const mutation of mutationList) {\r\n+    if (mutation.type === 'childList') {\r\n+      l('ob')\r\n+    }\r\n+  }\r\n+})\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+})\r\n+function refreshSlider(slider) {\r\n+  refreshSliderTo = setTimeout(() => {\r\n+    l('uo')\r\n+    slider.refresh()\r\n+    slider.go(0)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  }, 1000)\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705865045764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,192 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+  for (const mutation of mutationList) {\r\n+    if (mutation.type === 'childList') {\r\n+      refreshSlider(mutation.target)\r\n+    }\r\n+  }\r\n+})\r\n+selAll('.lib-item__slider').forEach((el) => {\r\n+  refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+})\r\n+function refreshSlider(slider) {\r\n+  refreshSliderTo = setTimeout(() => {\r\n+    l('uo')\r\n+    slider.refresh()\r\n+    slider.go(0)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  }, 1000)\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705868062338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element) {\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 100)\r\n+  }).observe(element, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    console.log('The children have been updated')\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+function refreshSlider(slider) {\r\n+  refreshSliderTo = setTimeout(() => {\r\n+    l('uo')\r\n+    slider.refresh()\r\n+    slider.go(0)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  }, 1000)\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        l(slider)\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705868262468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,206 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider) {\r\n+  const element = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 100)\r\n+  }).observe(element, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    l('uo')\r\n+    slider.refresh()\r\n+    slider.go(0)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705868274254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,206 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider) {\r\n+  const element = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 1000)\r\n+  }).observe(element, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    l('uo')\r\n+    slider.refresh()\r\n+    slider.go(0)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705868409680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,206 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider) {\r\n+  const element = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 1000)\r\n+  }).observe(element, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    l('uo', observer)\r\n+    slider.refresh()\r\n+    slider.go(0)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705869124711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,207 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider) {\r\n+  const element$ = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 1000)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    l('uo', observer)\r\n+    slider.refresh()\r\n+    slider.go(0)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705869221722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,8 @@\n   observer.observe(element$, { childList: true, subtree: true })\r\n \r\n   function callback() {\r\n     l('uo', observer)\r\n-    slider.refresh()\r\n     slider.go(0)\r\n     initSplideBullets(slider, sliderPrefix)\r\n \r\n     observer.disconnect()\r\n@@ -96,214 +95,10 @@\n     // The `renderitems` event runs whenever the list renders items after filtering.\r\n     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n       // console.log(renderedItems)\r\n       sliders.forEach((slider) => {\r\n-        initSliderOb(slider)\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n+        slider.refresh()\r\n \r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider) {\r\n-  const element = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 1000)\r\n-  }).observe(element, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    l('uo', observer)\r\n-    slider.refresh()\r\n-    slider.go(0)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n         initSliderOb(slider)\r\n         // slider.Components.Controller.toPage(1)\r\n         // refreshSlider(slider)\r\n       })\r\n@@ -410,1201 +205,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider) {\r\n-  const element = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 1000)\r\n-  }).observe(element, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    l('uo')\r\n-    slider.refresh()\r\n-    slider.go(0)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider)\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider) {\r\n-  const element = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 100)\r\n-  }).observe(element, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    l('uo')\r\n-    slider.refresh()\r\n-    slider.go(0)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider)\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element) {\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 100)\r\n-  }).observe(element, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    console.log('The children have been updated')\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-function refreshSlider(slider) {\r\n-  refreshSliderTo = setTimeout(() => {\r\n-    l('uo')\r\n-    slider.refresh()\r\n-    slider.go(0)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  }, 1000)\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        l(slider)\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-  for (const mutation of mutationList) {\r\n-    if (mutation.type === 'childList') {\r\n-      refreshSlider(mutation.target)\r\n-    }\r\n-  }\r\n-})\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-})\r\n-function refreshSlider(slider) {\r\n-  refreshSliderTo = setTimeout(() => {\r\n-    l('uo')\r\n-    slider.refresh()\r\n-    slider.go(0)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  }, 1000)\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-  for (const mutation of mutationList) {\r\n-    if (mutation.type === 'childList') {\r\n-      l('ob')\r\n-    }\r\n-  }\r\n-})\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-})\r\n-function refreshSlider(slider) {\r\n-  refreshSliderTo = setTimeout(() => {\r\n-    l('uo')\r\n-    slider.refresh()\r\n-    slider.go(0)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  }, 1000)\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-  for (const mutation of mutationList) {\r\n-    if (mutation.type === 'childList') {\r\n-      l('ob')\r\n-    }\r\n-  }\r\n-})\r\n-selAll('.lib-item__slider').forEach((el) => {\r\n-  observe(el, { childList: true, subtree: true })\r\n-})\r\n-function refreshSlider(slider) {\r\n-  refreshSliderTo = setTimeout(() => {\r\n-    l('uo')\r\n-    slider.refresh()\r\n-    slider.go(0)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  }, 1000)\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705869251341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider) {\r\n+  const element$ = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 1000)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    l('uo', observer)\r\n+    slider.go(0)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+\r\n+        slider.refresh()\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705869271928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider) {\r\n+  const element$ = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 1000)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    l('uo')\r\n+    slider.go(0)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+\r\n+        slider.refresh()\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705869393444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider) {\r\n+  const element$ = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 1000)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    l('uo')\r\n+    slider.refresh()\r\n+\r\n+    slider.go(0)\r\n+\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705869470677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider) {\r\n+  const element$ = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 1000)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    l('uo')\r\n+    slider.refresh()\r\n+\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+        slider.go(0)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705869591426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider) {\r\n+  const element$ = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 1000)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    l('uo')\r\n+    slider.refresh()\r\n+\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+\r\n+    slider.go(0)\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705869597364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,207 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider) {\r\n+  const element$ = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 1000)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    l('uo')\r\n+    slider.refresh()\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.go(0)\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705869613534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,207 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider) {\r\n+  const element$ = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 500)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    l('uo')\r\n+    slider.refresh()\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.go(0)\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705869725271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,8 @@\n   observer.observe(element$, { childList: true, subtree: true })\r\n \r\n   function callback() {\r\n     l('uo')\r\n-    slider.refresh()\r\n     initSplideBullets(slider, sliderPrefix)\r\n     slider.go(0)\r\n     observer.disconnect()\r\n   }\r\n@@ -96,1051 +95,8 @@\n     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n       // console.log(renderedItems)\r\n       sliders.forEach((slider) => {\r\n         initSliderOb(slider)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider) {\r\n-  const element$ = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 1000)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    l('uo')\r\n-    slider.refresh()\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.go(0)\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider) {\r\n-  const element$ = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 1000)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    l('uo')\r\n-    slider.refresh()\r\n-\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-\r\n-    slider.go(0)\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider) {\r\n-  const element$ = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 1000)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    l('uo')\r\n-    slider.refresh()\r\n-\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider)\r\n-        slider.go(0)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider) {\r\n-  const element$ = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 1000)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    l('uo')\r\n-    slider.refresh()\r\n-\r\n-    slider.go(0)\r\n-\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider)\r\n-\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider) {\r\n-  const element$ = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 1000)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    l('uo')\r\n-    slider.go(0)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider)\r\n-\r\n         slider.refresh()\r\n \r\n         // slider.Components.Controller.toPage(1)\r\n         // refreshSlider(slider)\r\n@@ -1248,421 +204,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider) {\r\n-  const element$ = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 1000)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    l('uo', observer)\r\n-    slider.go(0)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider)\r\n-\r\n-        slider.refresh()\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider) {\r\n-  const element$ = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 1000)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    l('uo', observer)\r\n-    slider.go(0)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        slider.refresh()\r\n-\r\n-        initSliderOb(slider)\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705869820627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider) {\r\n+  const element$ = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 500)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    l('uo')\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705869987516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider) {\r\n+  const element$ = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 500)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    l('uo')\r\n+    slider.refresh()\r\n+\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705871104073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(slider, callback) {\r\n+  const element$ = slider.root\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 500)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    // l('uo')\r\n+    // slider.refresh()\r\n+    callback()\r\n+    // initSplideBullets(slider, sliderPrefix)\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider)\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705871207712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,211 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, callback) {\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(callback, 1500)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+\r\n+  function callback() {\r\n+    // l('uo')\r\n+    // slider.refresh()\r\n+    callback()\r\n+    // initSplideBullets(slider, sliderPrefix)\r\n+    observer.disconnect()\r\n+  }\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root, () => {\r\n+          l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705871383936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,19 +71,21 @@\n function initSliderOb(element, callback) {\r\n   let observer, timeout\r\n   observer = new MutationObserver(function (mutations) {\r\n     clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 1500)\r\n+    timeout = setTimeout(() => {\r\n+      callback()\r\n+    }, 1500)\r\n   })\r\n   observer.observe(element, { childList: true, subtree: true })\r\n \r\n-  function callback() {\r\n-    // l('uo')\r\n-    // slider.refresh()\r\n-    callback()\r\n-    // initSplideBullets(slider, sliderPrefix)\r\n-    observer.disconnect()\r\n-  }\r\n+  // function callback() {\r\n+  //   // l('uo')\r\n+  //   // slider.refresh()\r\n+  //   callback()\r\n+  //   // initSplideBullets(slider, sliderPrefix)\r\n+  //   observer.disconnect()\r\n+  // }\r\n }\r\n window.fsAttributes = window.fsAttributes || []\r\n window.fsAttributes.push([\r\n   'cmsfilter',\r\n@@ -208,839 +210,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider, callback) {\r\n-  const element$ = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 500)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    // l('uo')\r\n-    // slider.refresh()\r\n-    callback()\r\n-    // initSplideBullets(slider, sliderPrefix)\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider)\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider) {\r\n-  const element$ = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 500)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    l('uo')\r\n-    slider.refresh()\r\n-\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider)\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider) {\r\n-  const element$ = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 500)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    l('uo')\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider)\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(slider) {\r\n-  const element$ = slider.root\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(callback, 500)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-\r\n-  function callback() {\r\n-    l('uo')\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.go(0)\r\n-    observer.disconnect()\r\n-  }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider)\r\n-        slider.refresh()\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705871737645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,206 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  let observer, timeout\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(() => {\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 1000, () => {\r\n+          l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705871819021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,205 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timeout)\r\n+    timeout = setTimeout(() => {\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 1000, () => {\r\n+          l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705872403867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,207 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  let timer = element.observerTimer || 0\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timer)\r\n+    timer = setTimeout(() => {\r\n+      l('xcv', this)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 1000, () => {\r\n+          l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705872448211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  l('xcv', this)\r\n+\r\n+  let timer = element.observerTimer || 0\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timer)\r\n+    timer = setTimeout(() => {\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705872495712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  let timer = element.observerTimer || 0\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    l('xcv', this)\r\n+\r\n+    clearTimeout(timer)\r\n+    timer = setTimeout(() => {\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705872553581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  let observer,\r\n+    timer = element.observerTimer || 0\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    l('xcv', this)\r\n+\r\n+    clearTimeout(timer)\r\n+    timer = setTimeout(() => {\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705872618332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  let observer,\r\n+    timer = element.observerTimer || 0\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    l('xcv', this)\r\n+\r\n+    clearTimeout(timer)\r\n+    timer = setTimeout(() => {\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        l(slider.root.querySelector('.splide__track'))\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705872751859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  let observer,\r\n+    timer = element.observerTimer || 0\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    l('xcv', this)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705872795193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  let observer,\r\n+    timer = element.observerTimer || 0\r\n+  observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('xcv', this)\r\n+\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705872864667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,11 +68,10 @@\n //   })\r\n // }\r\n //\r\n function initSliderOb(element, timeout, callback) {\r\n-  let observer,\r\n-    timer = element.observerTimer || 0\r\n-  observer = new MutationObserver(function (mutations) {\r\n+  let timer = element.observerTimer || 0\r\n+  const observer = new MutationObserver(function (mutations) {\r\n     clearTimeout(timer)\r\n     element.observerTimer = setTimeout(() => {\r\n       l('xcv', this)\r\n \r\n@@ -206,1879 +205,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  let observer,\r\n-    timer = element.observerTimer || 0\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    l('xcv', this)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  let observer,\r\n-    timer = element.observerTimer || 0\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    l('xcv', this)\r\n-\r\n-    clearTimeout(timer)\r\n-    timer = setTimeout(() => {\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        l(slider.root.querySelector('.splide__track'))\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  let observer,\r\n-    timer = element.observerTimer || 0\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    l('xcv', this)\r\n-\r\n-    clearTimeout(timer)\r\n-    timer = setTimeout(() => {\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  let timer = element.observerTimer || 0\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    l('xcv', this)\r\n-\r\n-    clearTimeout(timer)\r\n-    timer = setTimeout(() => {\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  l('xcv', this)\r\n-\r\n-  let timer = element.observerTimer || 0\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timer)\r\n-    timer = setTimeout(() => {\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  let timer = element.observerTimer || 0\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timer)\r\n-    timer = setTimeout(() => {\r\n-      l('xcv', this)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 1000, () => {\r\n-          l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(() => {\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 1000, () => {\r\n-          l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(() => {\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 1000, () => {\r\n-          l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, callback) {\r\n-  let observer, timeout\r\n-  observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timeout)\r\n-    timeout = setTimeout(() => {\r\n-      callback()\r\n-    }, 1500)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-\r\n-  // function callback() {\r\n-  //   // l('uo')\r\n-  //   // slider.refresh()\r\n-  //   callback()\r\n-  //   // initSplideBullets(slider, sliderPrefix)\r\n-  //   observer.disconnect()\r\n-  // }\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root, () => {\r\n-          l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705872893916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     element.observerTimer = setTimeout(() => {\r\n       l('xcv', this)\r\n \r\n       callback()\r\n-      observer.disconnect()\r\n+      this.disconnect()\r\n     }, timeout)\r\n   })\r\n   observer.observe(element, { childList: true, subtree: true })\r\n }\r\n"
                },
                {
                    "date": 1705872917106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,207 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  let timer = element.observerTimer || 0\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('xcv', this)\r\n+\r\n+      callback()\r\n+      this.disconnect()\r\n+    }, timeout)\r\n+  }).observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705872985106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,207 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  let timer = element.observerTimer || 0\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('xcv', this)\r\n+\r\n+      callback()\r\n+      this.disconnect()\r\n+    }, timeout)\r\n+  }).observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705873021347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n // }\r\n //\r\n function initSliderOb(element, timeout, callback) {\r\n   let timer = element.observerTimer || 0\r\n-  const observer = new MutationObserver(function (mutations) {\r\n+  new MutationObserver(function (mutations) {\r\n     clearTimeout(timer)\r\n     element.observerTimer = setTimeout(() => {\r\n       l('xcv', this)\r\n \r\n@@ -204,419 +204,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  let timer = element.observerTimer || 0\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('xcv', this)\r\n-\r\n-      callback()\r\n-      this.disconnect()\r\n-    }, timeout)\r\n-  }).observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  let timer = element.observerTimer || 0\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('xcv', this)\r\n-\r\n-      callback()\r\n-      this.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705873064181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,17 +69,18 @@\n // }\r\n //\r\n function initSliderOb(element, timeout, callback) {\r\n   let timer = element.observerTimer || 0\r\n-  new MutationObserver(function (mutations) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n     clearTimeout(timer)\r\n     element.observerTimer = setTimeout(() => {\r\n       l('xcv', this)\r\n \r\n       callback()\r\n       this.disconnect()\r\n     }, timeout)\r\n-  }).observe(element, { childList: true, subtree: true })\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n }\r\n window.fsAttributes = window.fsAttributes || []\r\n window.fsAttributes.push([\r\n   'cmsfilter',\r\n"
                },
                {
                    "date": 1705873078002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     element.observerTimer = setTimeout(() => {\r\n       l('xcv', this)\r\n \r\n       callback()\r\n-      this.disconnect()\r\n+      observer.disconnect()\r\n     }, timeout)\r\n   })\r\n   observer.observe(element, { childList: true, subtree: true })\r\n }\r\n"
                },
                {
                    "date": 1705873142024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n // }\r\n //\r\n function initSliderOb(element, timeout, callback) {\r\n   let timer = element.observerTimer || 0\r\n+  l(timer)\r\n   const observer = new MutationObserver(function (mutations) {\r\n     clearTimeout(timer)\r\n     element.observerTimer = setTimeout(() => {\r\n       l('xcv', this)\r\n"
                },
                {
                    "date": 1705873518920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n   l(timer)\r\n   const observer = new MutationObserver(function (mutations) {\r\n     clearTimeout(timer)\r\n     element.observerTimer = setTimeout(() => {\r\n-      l('xcv', this)\r\n+      l('xcv', element)\r\n \r\n       callback()\r\n       observer.disconnect()\r\n     }, timeout)\r\n"
                },
                {
                    "date": 1705873532301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n       // console.log(renderedItems)\r\n       sliders.forEach((slider) => {\r\n         initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          l('fff')\r\n+          // l('fff')\r\n         })\r\n         slider.refresh()\r\n         slider.go(0)\r\n         initSplideBullets(slider, sliderPrefix)\r\n"
                },
                {
                    "date": 1705873636831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n       l('xcv', element)\r\n \r\n       callback()\r\n       observer.disconnect()\r\n-    }, timeout)\r\n+    }, 500)\r\n   })\r\n   observer.observe(element, { childList: true, subtree: true })\r\n }\r\n window.fsAttributes = window.fsAttributes || []\r\n"
                },
                {
                    "date": 1705873835555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n //   })\r\n // }\r\n //\r\n function initSliderOb(element, timeout, callback) {\r\n-  let timer = element.observerTimer || 0\r\n+  let timer = element.observerTimer || Math.floor(Math.random() * 1000)\r\n   l(timer)\r\n   const observer = new MutationObserver(function (mutations) {\r\n     clearTimeout(timer)\r\n     element.observerTimer = setTimeout(() => {\r\n"
                },
                {
                    "date": 1705873898720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n   l(timer)\r\n   const observer = new MutationObserver(function (mutations) {\r\n     clearTimeout(timer)\r\n     element.observerTimer = setTimeout(() => {\r\n-      l('xcv', element)\r\n+      l('xcv', timer, element)\r\n \r\n       callback()\r\n       observer.disconnect()\r\n     }, 500)\r\n"
                },
                {
                    "date": 1705874239709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const timer = element.observerTimer || Math.floor(Math.random() * 1000)\r\n+  // l(timer)\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('xcv', timer, element)\r\n+\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, 500)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705874376275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n+  // l(timer)\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('xcv', timer, element)\r\n+\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, 500)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705877495177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  // l(timer)\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('xcv', timer, element)\r\n+\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, 500)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705877667937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,16 +68,13 @@\n //   })\r\n // }\r\n //\r\n function initSliderOb(element, timeout, callback) {\r\n-  // l(timer)\r\n   const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n-\r\n+    const timer = element.observerTimer || undefined\r\n     clearTimeout(timer)\r\n     element.observerTimer = setTimeout(() => {\r\n-      l('xcv', timer, element)\r\n-\r\n+      // l('upd:', timer, element)\r\n       callback()\r\n       observer.disconnect()\r\n     }, 500)\r\n   })\r\n@@ -207,631 +204,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n-  // l(timer)\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('xcv', timer, element)\r\n-\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, 500)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const timer = element.observerTimer || Math.floor(Math.random() * 1000)\r\n-  // l(timer)\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('xcv', timer, element)\r\n-\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, 500)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  let timer = element.observerTimer || Math.floor(Math.random() * 1000)\r\n-  l(timer)\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('xcv', timer, element)\r\n-\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, 500)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705877690910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,207 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || undefined\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, 500)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705877813821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,207 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || 0\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, 500)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705877843801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,216 +69,10 @@\n // }\r\n //\r\n function initSliderOb(element, timeout, callback) {\r\n   const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || 0\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, 500)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n \r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || undefined\r\n     clearTimeout(timer)\r\n     element.observerTimer = setTimeout(() => {\r\n       l('upd:', timer, element)\r\n       callback()\r\n@@ -411,211 +205,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || undefined\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, 500)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705877924535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || undefined\r\n+\r\n+    if (timer) clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, 500)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // l('fff')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705877958911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,216 +69,8 @@\n // }\r\n //\r\n function initSliderOb(element, timeout, callback) {\r\n   const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || undefined\r\n-\r\n-    if (timer) clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, 500)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n     const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n \r\n     clearTimeout(timer)\r\n     element.observerTimer = setTimeout(() => {\r\n"
                },
                {
                    "date": 1705878023832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705878071714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705878078486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705878180842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705878333882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705878582343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,212 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('refresh', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705878596542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,212 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('refresh', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705878734399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,212 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('refresh', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705878855121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n     sliders.push(slider)\r\n \r\n     initSplideArrows(slider, sliderPrefix)\r\n     initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('refresh', () => {\r\n+    slider.on('resize', () => {\r\n       initSplideBullets(slider, sliderPrefix)\r\n     })\r\n   })\r\n })\r\n@@ -209,1679 +209,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('refresh', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('refresh', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, 500)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // l('fff')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705878917197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,10 +94,11 @@\n       sliders.forEach((slider) => {\r\n         initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n           // initSplideBullets(slider, sliderPrefix)\r\n           slider.refresh()\r\n+          initSplideBullets(slider, sliderPrefix)\r\n         })\r\n-        // slider.refresh()\r\n+        slider.refresh()\r\n         slider.go(0)\r\n         // initSplideBullets(slider, sliderPrefix)\r\n \r\n         // slider.Components.Controller.toPage(1)\r\n@@ -135,11 +136,8 @@\n     sliders.push(slider)\r\n \r\n     initSplideArrows(slider, sliderPrefix)\r\n     initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resize', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n   })\r\n })\r\n \r\n export function onDomReady(run) {\r\n"
                },
                {
                    "date": 1705879020998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,212 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n+            initSplideBullets(slider, sliderPrefix)\r\n+          })\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705879049394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,212 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initSliderOb(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n+            initSplideBullets(slider, sliderPrefix)\r\n+          })\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705879364257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705879619552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  l(slider$, pages)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705879812194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  // l(slider$, pages)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705879848730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  l(slider$, pages)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705879907747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'auto'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705880026797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705880113283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705880213308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,8 +183,9 @@\n     // pagination$.style.visibility = 'hidden'\r\n     // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n   }\r\n   splide.on('move', function (newIndex, oldIndex) {\r\n+    l(this)\r\n     const index = splide.Components.Controller.toPage(splide.index)\r\n \r\n     slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n     slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n"
                },
                {
                    "date": 1705880262724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    const index = splide.Components.Controller.toPage(splide.index)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705880667679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.floor(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705880702375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705882290014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,15 +95,15 @@\n         initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n           // initSplideBullets(slider, sliderPrefix)\r\n           slider.refresh()\r\n         })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n+        // initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n \r\n-        slider.refresh()\r\n+        // slider.refresh()\r\n         slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n \r\n         // slider.Components.Controller.toPage(1)\r\n         // refreshSlider(slider)\r\n       })\r\n"
                },
                {
                    "date": 1705882334996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        // initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    // slider.on('resized', () => {\r\n+    //   initSplideBullets(slider, sliderPrefix)\r\n+    // })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705882374529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,227 +101,8 @@\n         // })\r\n \r\n         // slider.refresh()\r\n         slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    // slider.on('resized', () => {\r\n-    //   initSplideBullets(slider, sliderPrefix)\r\n-    // })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        // initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n         // initSplideBullets(slider, sliderPrefix)\r\n \r\n         // slider.Components.Controller.toPage(1)\r\n         // refreshSlider(slider)\r\n@@ -435,2588 +216,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.floor(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    l(this)\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  l(slider$, pages)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  // l(slider$, pages)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  l(slider$, pages)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          initSliderOb(slider.root.querySelector('.splide__track'), 500, () => {\r\n-            initSplideBullets(slider, sliderPrefix)\r\n-          })\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n-            initSplideBullets(slider, sliderPrefix)\r\n-          })\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initSliderOb(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 1000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initSliderOb(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'auto'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    const index = splide.Components.Controller.toPage(splide.index)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705882400099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n         // initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n         //   initSplideBullets(slider, sliderPrefix)\r\n         // })\r\n \r\n-        // slider.refresh()\r\n+        slider.refresh()\r\n         slider.go(0)\r\n         // initSplideBullets(slider, sliderPrefix)\r\n \r\n         // slider.Components.Controller.toPage(1)\r\n"
                },
                {
                    "date": 1705882474825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n         // })\r\n \r\n         slider.refresh()\r\n         slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n \r\n         // slider.Components.Controller.toPage(1)\r\n         // refreshSlider(slider)\r\n       })\r\n"
                },
                {
                    "date": 1705882481859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,11 +95,11 @@\n         initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n           // initSplideBullets(slider, sliderPrefix)\r\n           slider.refresh()\r\n         })\r\n-        // initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n \r\n         slider.refresh()\r\n         slider.go(0)\r\n         initSplideBullets(slider, sliderPrefix)\r\n"
                },
                {
                    "date": 1705882518541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705882558339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705882618224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          // slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705882717596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705883037419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  if (element.observer) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705883053854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  if (element.observer) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705883161892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  if (element.observer) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705883241202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,223 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  if (element.observer) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705883297276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,223 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, callback) {\r\n+  if (element.observer) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 500, () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705883541472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n // }\r\n //\r\n function initObserver(element, timeout, callback) {\r\n   if (element.observer) return\r\n+  l('ii')\r\n   const observer = new MutationObserver(function (mutations) {\r\n     const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n \r\n     clearTimeout(timer)\r\n@@ -96,13 +97,13 @@\n       sliders.forEach((slider) => {\r\n         initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n           // initSplideBullets(slider, sliderPrefix)\r\n           slider.refresh()\r\n-          l('ref')\r\n+          // l('ref')\r\n         })\r\n         initObserver(slider.root.querySelector('.splide__list'), 500, () => {\r\n           initSplideBullets(slider, sliderPrefix)\r\n-          l('pag')\r\n+          // l('pag')\r\n         })\r\n \r\n         // slider.refresh()\r\n         slider.go(0)\r\n"
                },
                {
                    "date": 1705883747228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,224 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer[observerName]) return\r\n+  l(element.observer[observerName])\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705883906015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,224 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer[observerName]) return\r\n+  l(element.observer[observerName])\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705883933535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,224 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer[observerName]) return\r\n+  // l(element.observer[observerName])\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705883958868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,224 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?[observerName]) return\r\n+  // l(element.observer[observerName])\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705883979059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,224 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  // l(element.observer[observerName])\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705884057625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,9 @@\n       // observer.disconnect()\r\n     }, timeout)\r\n   })\r\n   observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = {}\r\n   element.observer[observerName] = observer\r\n }\r\n window.fsAttributes = window.fsAttributes || []\r\n window.fsAttributes.push([\r\n@@ -221,3105 +222,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?[observerName]) return\r\n-  // l(element.observer[observerName])\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer[observerName]) return\r\n-  // l(element.observer[observerName])\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer[observerName]) return\r\n-  l(element.observer[observerName])\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer[observerName]) return\r\n-  l(element.observer[observerName])\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  if (element.observer) return\r\n-  l('ii')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 500, () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  if (element.observer) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  if (element.observer) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  if (element.observer) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  if (element.observer) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          // slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, callback) {\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705884113465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n // }\r\n //\r\n function initObserver(element, timeout, observerName = 'default', callback) {\r\n   if (element.observer?.[observerName]) return\r\n-  // l(element.observer[observerName])\r\n+  l(element.observer[observerName])\r\n   const observer = new MutationObserver(function (mutations) {\r\n     const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n \r\n     clearTimeout(timer)\r\n"
                },
                {
                    "date": 1705884151746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(element.observer[observerName])\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705884166643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(element.observer?.[observerName])\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705884248345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(element)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705884330907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n           // initSplideBullets(slider, sliderPrefix)\r\n           slider.refresh()\r\n           // l('ref')\r\n         })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n           initSplideBullets(slider, sliderPrefix)\r\n           // l('pag')\r\n         })\r\n \r\n@@ -224,681 +224,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(element.observer?.[observerName])\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(element.observer[observerName])\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  l(element.observer[observerName])\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705884385929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705884475172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          // slider.refresh()\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705884533469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705884547554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,228 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        // slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705884588812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n     // The `renderitems` event runs whenever the list renders items after filtering.\r\n     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n       // console.log(renderedItems)\r\n       sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 200, 'refresh', () => {\r\n           // initSplideBullets(slider, sliderPrefix)\r\n           slider.refresh()\r\n           slider.go(0)\r\n           // l('ref')\r\n@@ -225,912 +225,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          // slider.refresh()\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(element)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705884620713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,228 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        // slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705884728289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,228 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        // initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        //   // l('pag')\r\n+        // })\r\n+\r\n+        // slider.refresh()\r\n+        // slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705884865339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,228 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+\r\n+        // slider.refresh()\r\n+        // slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705884975020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,229 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        setTimeout(() => {\r\n+          initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+            initSplideBullets(slider, sliderPrefix)\r\n+            // l('pag')\r\n+          })\r\n+        }, 1000)\r\n+        // slider.refresh()\r\n+        // slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705885129078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = element.observer || {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        // slider.refresh()\r\n+        // slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705885388114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,229 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element.observerTimer = element.observerTimer || {}\r\n+\r\n+    const timer = element.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = element.observer || {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        // slider.refresh()\r\n+        // slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705885713208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element, timeout, observerName = 'default', persist = true, callback) {\r\n+  if (element.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element.observerTimer = element.observerTimer || {}\r\n+\r\n+    const timer = element.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element, { childList: true, subtree: true })\r\n+  element.observer = element.observer || {}\r\n+  element.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        // slider.refresh()\r\n+        // slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705885820951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', persist = true, callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', '', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        // slider.refresh()\r\n+        // slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705885855625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider) => {\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        // slider.refresh()\r\n+        // slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705885926704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        // slider.refresh()\r\n+        // slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705885991736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705886024721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705886272970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, subtree: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705886364291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705886624622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705886734356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 300, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705886843536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 1300, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705886912016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 1000, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 1000, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705887128028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,222 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 1000, 'refresh', () => {\r\n+          slider.refresh()\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705887133494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,222 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 1000, 'refresh', () => {\r\n+          slider.refresh()\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+        slider.refresh()\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705887148040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,468 +101,15 @@\n     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n       // console.log(renderedItems)\r\n       sliders.forEach((slider, i) => {\r\n         l(i)\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 1000, 'refresh', () => {\r\n-          slider.refresh()\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n         slider.refresh()\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 1000, 'refresh', () => {\r\n-          slider.refresh()\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-        slider.refresh()\r\n         slider.go(0)\r\n         initSplideBullets(slider, sliderPrefix)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n         initObserver(slider.root.querySelector('.splide__list'), 1000, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n           slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 1000, 'bullets', () => {\r\n           initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n         })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n       })\r\n     })\r\n   },\r\n ])\r\n@@ -672,4139 +219,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 1300, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 300, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__track'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        // slider.refresh()\r\n-        // slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        // slider.refresh()\r\n-        // slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', persist = true, callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, subtree: true })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', '', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        // slider.refresh()\r\n-        // slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', persist = true, callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element.observerTimer = element.observerTimer || {}\r\n-\r\n-    const timer = element.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = element.observer || {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        // slider.refresh()\r\n-        // slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element.observerTimer = element.observerTimer || {}\r\n-\r\n-    const timer = element.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = element.observer || {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        // slider.refresh()\r\n-        // slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = element.observer || {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        // slider.refresh()\r\n-        // slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        setTimeout(() => {\r\n-          initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-            initSplideBullets(slider, sliderPrefix)\r\n-            // l('pag')\r\n-          })\r\n-        }, 1000)\r\n-        // slider.refresh()\r\n-        // slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        // slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        // initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        //   // l('pag')\r\n-        // })\r\n-\r\n-        // slider.refresh()\r\n-        // slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        // slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element, timeout, observerName = 'default', callback) {\r\n-  if (element.observer?.[observerName]) return\r\n-  l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    const timer = element.observerTimer || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element.observerTimer = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element, { childList: true, subtree: true })\r\n-  element.observer = {}\r\n-  element.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider) => {\r\n-        initObserver(slider.root.querySelector('.splide__track'), 200, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__track'), 500, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-\r\n-        // slider.refresh()\r\n-        // slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705887305413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        initObserver(slider.root.querySelector('.splide__list'), 1500, 'refresh', () => {\r\n+          slider.refresh()\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705887532802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n // }\r\n //\r\n function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n   if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n   const observer = new MutationObserver(function (mutations) {\r\n     element$.observerTimer = element$.observerTimer || {}\r\n \r\n     const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n@@ -99,238 +100,25 @@\n     // The `renderitems` event runs whenever the list renders items after filtering.\r\n     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n       // console.log(renderedItems)\r\n       sliders.forEach((slider, i) => {\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        initObserver(slider.root.querySelector('.splide__list'), 1500, 'refresh', () => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 1000, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n           slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 2000, 'bullets', () => {\r\n           initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n         })\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n         slider.refresh()\r\n         slider.go(0)\r\n         initSplideBullets(slider, sliderPrefix)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 1000, 'refresh', () => {\r\n-          slider.refresh()\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n       })\r\n     })\r\n   },\r\n ])\r\n"
                },
                {
                    "date": 1705887695062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 2000, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 3000, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705887755802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 3000, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 1000, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705887788997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 30000, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 1000, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705887941946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 1000, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 2000, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705887957289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 30000, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 40000, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889041156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889075828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  // l('ini')\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // if(!persist) observer.disconnect()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+          // initSplideBullets(slider, sliderPrefix)\r\n+          slider.refresh()\r\n+          // slider.go(0)\r\n+          // l('ref')\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+          // l('pag')\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889624368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+        //   slider.refresh()\r\n+        // })\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889685325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+        //   slider.refresh()\r\n+        // })\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889692085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+        //   slider.refresh()\r\n+        // })\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889697462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+        //   slider.refresh()\r\n+        // })\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889704815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+        //   slider.refresh()\r\n+        // })\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889710073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+        //   slider.refresh()\r\n+        // })\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889710266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+        //   slider.refresh()\r\n+        // })\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889715515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+        //   slider.refresh()\r\n+        // })\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889721034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+        //   slider.refresh()\r\n+        // })\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889732647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,3652 +222,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-        //   slider.refresh()\r\n-        // })\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-        //   slider.refresh()\r\n-        // })\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-        //   slider.refresh()\r\n-        // })\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-        //   slider.refresh()\r\n-        // })\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-        //   slider.refresh()\r\n-        // })\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-        //   slider.refresh()\r\n-        // })\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-        //   slider.refresh()\r\n-        // })\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-        //   slider.refresh()\r\n-        // })\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 30000, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 40000, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 1000, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 2000, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 30000, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 1000, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 3000, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 1000, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 2000, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 3000, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  // l('ini')\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // if(!persist) observer.disconnect()\r\n-      observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 1000, 'refresh', () => {\r\n-          // initSplideBullets(slider, sliderPrefix)\r\n-          slider.refresh()\r\n-          // slider.go(0)\r\n-          // l('ref')\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 2000, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-          // l('pag')\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705889741750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+        //   slider.refresh()\r\n+        // })\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889753313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889759841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889768127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889773473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705889790015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,1129 +222,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-        //   slider.refresh()\r\n-        // })\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-        //   slider.refresh()\r\n-        // })\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                },
                {
                    "date": 1705889798378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+          slider.refresh()\r\n+        })\r\n+        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+          initSplideBullets(slider, sliderPrefix)\r\n+        })\r\n+        slider.refresh()\r\n+        slider.go(0)\r\n+        initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705891557474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,13 +69,13 @@\n // }\r\n //\r\n function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n   // if (element$.observer?.[observerName]) return\r\n+  const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+\r\n   const observer = new MutationObserver(function (mutations) {\r\n     element$.observerTimer = element$.observerTimer || {}\r\n \r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n     clearTimeout(timer)\r\n     element$.observerTimer[observerName] = setTimeout(() => {\r\n       // l('upd:', timer, element)\r\n       l(observerName, element$)\r\n@@ -99,17 +99,17 @@\n     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n       // console.log(renderedItems)\r\n       sliders.forEach((slider, i) => {\r\n         l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+        //   slider.refresh()\r\n+        // })\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n+        // slider.refresh()\r\n+        // slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n \r\n         // slider.Components.Controller.toPage(1)\r\n         // refreshSlider(slider)\r\n       })\r\n@@ -148,8 +148,14 @@\n     initSplideBullets(slider, sliderPrefix)\r\n     slider.on('resized', () => {\r\n       // initSplideBullets(slider, sliderPrefix)\r\n     })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+      slider.refresh()\r\n+    })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n   })\r\n })\r\n \r\n export function onDomReady(run) {\r\n"
                },
                {
                    "date": 1705891590716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  // if (element$.observer?.[observerName]) return\r\n+  const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n+  element$.observerTimer = element$.observerTimer || {}\r\n+\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timer)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+window.fsAttributes = window.fsAttributes || []\r\n+window.fsAttributes.push([\r\n+  'cmsfilter',\r\n+  (filterInstances) => {\r\n+    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+    const [filterInstance] = filterInstances\r\n+\r\n+    // The `renderitems` event runs whenever the list renders items after filtering.\r\n+    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+      // console.log(renderedItems)\r\n+      sliders.forEach((slider, i) => {\r\n+        l(i)\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+        //   slider.refresh()\r\n+        // })\r\n+        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+        //   initSplideBullets(slider, sliderPrefix)\r\n+        // })\r\n+        // slider.refresh()\r\n+        // slider.go(0)\r\n+        // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+        // slider.Components.Controller.toPage(1)\r\n+        // refreshSlider(slider)\r\n+      })\r\n+    })\r\n+  },\r\n+])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+      slider.refresh()\r\n+    })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705891875644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  const timerId = Math.round(Math.random() * 10000)\r\n+  element$.observerTimer = {}\r\n+\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timerId)\r\n+    element$.observerTimer[observerName] = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+// window.fsAttributes = window.fsAttributes || []\r\n+// window.fsAttributes.push([\r\n+//   'cmsfilter',\r\n+//   (filterInstances) => {\r\n+//     // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+//     const [filterInstance] = filterInstances\r\n+\r\n+//     // The `renderitems` event runs whenever the list renders items after filtering.\r\n+//     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+//       // console.log(renderedItems)\r\n+//       sliders.forEach((slider, i) => {\r\n+//         l(i)\r\n+//         // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+//         //   slider.refresh()\r\n+//         // })\r\n+//         // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+//         //   initSplideBullets(slider, sliderPrefix)\r\n+//         // })\r\n+//         // slider.refresh()\r\n+//         // slider.go(0)\r\n+//         // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+//         // slider.Components.Controller.toPage(1)\r\n+//         // refreshSlider(slider)\r\n+//       })\r\n+//     })\r\n+//   },\r\n+// ])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+      slider.refresh()\r\n+    })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705891988758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  let timerId = 0\r\n+  element$.observerTimer = {}\r\n+\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timerId)\r\n+    timerId = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+// window.fsAttributes = window.fsAttributes || []\r\n+// window.fsAttributes.push([\r\n+//   'cmsfilter',\r\n+//   (filterInstances) => {\r\n+//     // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+//     const [filterInstance] = filterInstances\r\n+\r\n+//     // The `renderitems` event runs whenever the list renders items after filtering.\r\n+//     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+//       // console.log(renderedItems)\r\n+//       sliders.forEach((slider, i) => {\r\n+//         l(i)\r\n+//         // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+//         //   slider.refresh()\r\n+//         // })\r\n+//         // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+//         //   initSplideBullets(slider, sliderPrefix)\r\n+//         // })\r\n+//         // slider.refresh()\r\n+//         // slider.go(0)\r\n+//         // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+//         // slider.Components.Controller.toPage(1)\r\n+//         // refreshSlider(slider)\r\n+//       })\r\n+//     })\r\n+//   },\r\n+// ])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+      slider.refresh()\r\n+    })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705892062846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  let timerId = 0\r\n+  element$.observerTimer = {}\r\n+\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timerId)\r\n+    timerId = setTimeout(() => {\r\n+      // l('upd:', timer, element)\r\n+      l(observerName, element$)\r\n+\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+// window.fsAttributes = window.fsAttributes || []\r\n+// window.fsAttributes.push([\r\n+//   'cmsfilter',\r\n+//   (filterInstances) => {\r\n+//     // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+//     const [filterInstance] = filterInstances\r\n+\r\n+//     // The `renderitems` event runs whenever the list renders items after filtering.\r\n+//     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+//       // console.log(renderedItems)\r\n+//       sliders.forEach((slider, i) => {\r\n+//         l(i)\r\n+//         // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+//         //   slider.refresh()\r\n+//         // })\r\n+//         // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+//         //   initSplideBullets(slider, sliderPrefix)\r\n+//         // })\r\n+//         // slider.refresh()\r\n+//         // slider.go(0)\r\n+//         // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+//         // slider.Components.Controller.toPage(1)\r\n+//         // refreshSlider(slider)\r\n+//       })\r\n+//     })\r\n+//   },\r\n+// ])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+      slider.refresh()\r\n+      slider.go(0)\r\n+    })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705892575686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,228 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+let refreshSliderTo\r\n+//  const refreshSliderOb   =\r\n+// const config =\r\n+// function initSliderOb(slider)\r\n+// {\r\n+//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n+//     for (const mutation of mutationList) {\r\n+//       if (mutation.type === 'childList') {\r\n+//         refreshSlider(slider)\r\n+//       }\r\n+//     }\r\n+//   })\r\n+//   selAll('.lib-item__slider').forEach((el) => {\r\n+//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n+//   })\r\n+// }\r\n+//\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  let timerId = 0\r\n+\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timerId)\r\n+    timerId = setTimeout(() => {\r\n+      console.log(observerName, element$)\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+// window.fsAttributes = window.fsAttributes || []\r\n+// window.fsAttributes.push([\r\n+//   'cmsfilter',\r\n+//   (filterInstances) => {\r\n+//     // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n+//     const [filterInstance] = filterInstances\r\n+\r\n+//     // The `renderitems` event runs whenever the list renders items after filtering.\r\n+//     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n+//       // console.log(renderedItems)\r\n+//       sliders.forEach((slider, i) => {\r\n+//         l(i)\r\n+//         // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+//         //   slider.refresh()\r\n+//         // })\r\n+//         // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+//         //   initSplideBullets(slider, sliderPrefix)\r\n+//         // })\r\n+//         // slider.refresh()\r\n+//         // slider.go(0)\r\n+//         // initSplideBullets(slider, sliderPrefix)\r\n+\r\n+//         // slider.Components.Controller.toPage(1)\r\n+//         // refreshSlider(slider)\r\n+//       })\r\n+//     })\r\n+//   },\r\n+// ])\r\n+\r\n+// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+      slider.refresh()\r\n+      slider.go(0)\r\n+    })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    // l(slider$, pages)\r\n+    pagination$.parentElement.style.maxHeight = 'none'\r\n+    // pagination$.style.visibility = 'visible'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // pagination$.replaceChildren()\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+    // pagination$.style.visibility = 'hidden'\r\n+    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705894283335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+import Splide from '@splidejs/splide'\r\n+import '@splidejs/splide/css'\r\n+import './style.styl'\r\n+\r\n+const sel = (e) => document.querySelector(e)\r\n+const selAll = (e) => document.querySelectorAll(e)\r\n+const l = (...e) => console.log(...e)\r\n+const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n+\r\n+const contentDd$ = sel('.lib-filter__dd--content')\r\n+const sliderPrefix = 'lib-item'\r\n+let sliders = []\r\n+function toggleItems(_el) {\r\n+  selAll('.lib-item').forEach((el) => {\r\n+    if (el.classList.contains('lib-item--' + _el)) {\r\n+      el.classList.remove('hide')\r\n+    } else {\r\n+      el.classList.add('hide')\r\n+    }\r\n+  })\r\n+}\r\n+contentDd$.addEventListener('change', (e) => {\r\n+  switch (e.target.value) {\r\n+    case 'blog':\r\n+      toggleItems('blog')\r\n+      break\r\n+    case 'podcast':\r\n+      toggleItems('podcast')\r\n+      break\r\n+    case 'article':\r\n+      toggleItems('article')\r\n+      break\r\n+    case 'whitepaper':\r\n+      toggleItems('whitepaper')\r\n+      break\r\n+    case 'video':\r\n+      toggleItems('video')\r\n+      break\r\n+    case 'webinar':\r\n+      toggleItems('webinar')\r\n+      break\r\n+    default:\r\n+      selAll('.lib-item').forEach((el) => {\r\n+        el.classList.remove('hide')\r\n+      })\r\n+  }\r\n+})\r\n+\r\n+sel('.clear-filter').addEventListener('click', (e) => {\r\n+  contentDd$.value = 'all'\r\n+  contentDd$.dispatchEvent(new Event('change'))\r\n+})\r\n+\r\n+function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n+  if (element$.observer?.[observerName]) return\r\n+  let timerId = 0\r\n+\r\n+  const observer = new MutationObserver(function (mutations) {\r\n+    clearTimeout(timerId)\r\n+    timerId = setTimeout(() => {\r\n+      console.log(observerName, element$)\r\n+      callback()\r\n+      // observer.disconnect()\r\n+    }, timeout)\r\n+  })\r\n+  observer.observe(element$, { childList: true, attributes: false })\r\n+  element$.observer = element$.observer || {}\r\n+  element$.observer[observerName] = observer\r\n+}\r\n+\r\n+onDomReady(() => {\r\n+  selAll('.lib-item__slider').forEach((el) => {\r\n+    // const el = sel('.slider--' + el_)\r\n+    addSplideClasses(el)\r\n+\r\n+    const slider = new Splide(el, {\r\n+      arrows: false,\r\n+      pagination: false,\r\n+      gap: '2rem',\r\n+      // type: 'loop',\r\n+      // rewind: true,\r\n+      perPage: 3,\r\n+      perMove: 3,\r\n+      speed: 1500,\r\n+      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n+      breakpoints: {\r\n+        991: {\r\n+          perPage: 2,\r\n+        },\r\n+        478: {\r\n+          perPage: 1,\r\n+        },\r\n+      },\r\n+    }).mount()\r\n+    sliders.push(slider)\r\n+\r\n+    initSplideArrows(slider, sliderPrefix)\r\n+    initSplideBullets(slider, sliderPrefix)\r\n+    slider.on('resized', () => {\r\n+      // initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n+      slider.refresh()\r\n+      slider.go(0)\r\n+    })\r\n+    initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n+      initSplideBullets(slider, sliderPrefix)\r\n+    })\r\n+  })\r\n+})\r\n+\r\n+export function onDomReady(run) {\r\n+  if (document.readyState !== 'loading') {\r\n+    run()\r\n+  } else {\r\n+    document.addEventListener('DOMContentLoaded', function () {\r\n+      run()\r\n+    })\r\n+  }\r\n+}\r\n+export function initSplideBullets(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  // parse bullets inside the container and repopulate\r\n+  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n+  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n+  if (pages > 1) {\r\n+    pagination$.parentElement.style.maxHeight = 'revert-layer'\r\n+\r\n+    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n+    let fragment = document.createDocumentFragment()\r\n+    for (let i = 0; i < pages; i++) {\r\n+      let clone$ = bullet$.cloneNode(true)\r\n+      clone$.addEventListener('click', (e) => {\r\n+        splide.go('>' + i)\r\n+      })\r\n+      fragment.appendChild(clone$)\r\n+    }\r\n+    fragment.firstChild.classList.add('bullet--active')\r\n+    pagination$.replaceChildren(fragment)\r\n+  } else {\r\n+    // keep the dom elements to repopulate in the future\r\n+    pagination$.parentElement.style.maxHeight = '0px'\r\n+  }\r\n+  splide.on('move', function (newIndex, oldIndex) {\r\n+    if (pages < 2) return\r\n+    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n+    const index = Math.ceil(newIndex / splide.options.perPage)\r\n+\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n+    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n+  })\r\n+}\r\n+export function initSplideArrows(splide, classPrefix) {\r\n+  const slider$ = splide.root\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n+    splide.go('<')\r\n+  })\r\n+\r\n+  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n+    splide.go('>')\r\n+  })\r\n+}\r\n+export function addSplideClasses(slider) {\r\n+  let splide\r\n+  if (typeof slider === 'string') {\r\n+    splide = document.querySelector('.' + slider)\r\n+  } else if (isDomEl(slider)) {\r\n+    splide = slider\r\n+  }\r\n+  const track = splide.children[0]\r\n+  const list = track.children[0]\r\n+  const slide = list.childNodes\r\n+  splide.classList.add('splide')\r\n+  track.classList.add('splide__track')\r\n+  list.classList.add('splide__list')\r\n+  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n+}\r\n"
                },
                {
                    "date": 1705894329895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n   // parse bullets inside the container and repopulate\r\n   const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n   const pages = Math.ceil(splide.length / splide.options.perPage)\r\n   if (pages > 1) {\r\n-    pagination$.parentElement.style.maxHeight = 'revert-layer'\r\n+    pagination$.parentElement.style.maxHeight = 'revert-layer' // to get the css value\r\n \r\n     const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n     let fragment = document.createDocumentFragment()\r\n     for (let i = 0; i < pages; i++) {\r\n@@ -174,1609 +174,4 @@\n   track.classList.add('splide__track')\r\n   list.classList.add('splide__list')\r\n   slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n }\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  let timerId = 0\r\n-\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timerId)\r\n-    timerId = setTimeout(() => {\r\n-      console.log(observerName, element$)\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-// window.fsAttributes = window.fsAttributes || []\r\n-// window.fsAttributes.push([\r\n-//   'cmsfilter',\r\n-//   (filterInstances) => {\r\n-//     // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-//     const [filterInstance] = filterInstances\r\n-\r\n-//     // The `renderitems` event runs whenever the list renders items after filtering.\r\n-//     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-//       // console.log(renderedItems)\r\n-//       sliders.forEach((slider, i) => {\r\n-//         l(i)\r\n-//         // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-//         //   slider.refresh()\r\n-//         // })\r\n-//         // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-//         //   initSplideBullets(slider, sliderPrefix)\r\n-//         // })\r\n-//         // slider.refresh()\r\n-//         // slider.go(0)\r\n-//         // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-//         // slider.Components.Controller.toPage(1)\r\n-//         // refreshSlider(slider)\r\n-//       })\r\n-//     })\r\n-//   },\r\n-// ])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-    initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-      slider.refresh()\r\n-      slider.go(0)\r\n-    })\r\n-    initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  let timerId = 0\r\n-  element$.observerTimer = {}\r\n-\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timerId)\r\n-    timerId = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-// window.fsAttributes = window.fsAttributes || []\r\n-// window.fsAttributes.push([\r\n-//   'cmsfilter',\r\n-//   (filterInstances) => {\r\n-//     // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-//     const [filterInstance] = filterInstances\r\n-\r\n-//     // The `renderitems` event runs whenever the list renders items after filtering.\r\n-//     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-//       // console.log(renderedItems)\r\n-//       sliders.forEach((slider, i) => {\r\n-//         l(i)\r\n-//         // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-//         //   slider.refresh()\r\n-//         // })\r\n-//         // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-//         //   initSplideBullets(slider, sliderPrefix)\r\n-//         // })\r\n-//         // slider.refresh()\r\n-//         // slider.go(0)\r\n-//         // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-//         // slider.Components.Controller.toPage(1)\r\n-//         // refreshSlider(slider)\r\n-//       })\r\n-//     })\r\n-//   },\r\n-// ])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-    initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-      slider.refresh()\r\n-      slider.go(0)\r\n-    })\r\n-    initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  let timerId = 0\r\n-  element$.observerTimer = {}\r\n-\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timerId)\r\n-    timerId = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-// window.fsAttributes = window.fsAttributes || []\r\n-// window.fsAttributes.push([\r\n-//   'cmsfilter',\r\n-//   (filterInstances) => {\r\n-//     // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-//     const [filterInstance] = filterInstances\r\n-\r\n-//     // The `renderitems` event runs whenever the list renders items after filtering.\r\n-//     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-//       // console.log(renderedItems)\r\n-//       sliders.forEach((slider, i) => {\r\n-//         l(i)\r\n-//         // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-//         //   slider.refresh()\r\n-//         // })\r\n-//         // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-//         //   initSplideBullets(slider, sliderPrefix)\r\n-//         // })\r\n-//         // slider.refresh()\r\n-//         // slider.go(0)\r\n-//         // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-//         // slider.Components.Controller.toPage(1)\r\n-//         // refreshSlider(slider)\r\n-//       })\r\n-//     })\r\n-//   },\r\n-// ])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-    initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-      slider.refresh()\r\n-    })\r\n-    initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  if (element$.observer?.[observerName]) return\r\n-  const timerId = Math.round(Math.random() * 10000)\r\n-  element$.observerTimer = {}\r\n-\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timerId)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-// window.fsAttributes = window.fsAttributes || []\r\n-// window.fsAttributes.push([\r\n-//   'cmsfilter',\r\n-//   (filterInstances) => {\r\n-//     // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-//     const [filterInstance] = filterInstances\r\n-\r\n-//     // The `renderitems` event runs whenever the list renders items after filtering.\r\n-//     filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-//       // console.log(renderedItems)\r\n-//       sliders.forEach((slider, i) => {\r\n-//         l(i)\r\n-//         // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-//         //   slider.refresh()\r\n-//         // })\r\n-//         // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-//         //   initSplideBullets(slider, sliderPrefix)\r\n-//         // })\r\n-//         // slider.refresh()\r\n-//         // slider.go(0)\r\n-//         // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-//         // slider.Components.Controller.toPage(1)\r\n-//         // refreshSlider(slider)\r\n-//       })\r\n-//     })\r\n-//   },\r\n-// ])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-    initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-      slider.refresh()\r\n-    })\r\n-    initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-  element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-        //   slider.refresh()\r\n-        // })\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n-        // slider.refresh()\r\n-        // slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-    initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-      slider.refresh()\r\n-    })\r\n-    initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-        //   slider.refresh()\r\n-        // })\r\n-        // initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-        //   initSplideBullets(slider, sliderPrefix)\r\n-        // })\r\n-        // slider.refresh()\r\n-        // slider.go(0)\r\n-        // initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-    initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-      slider.refresh()\r\n-    })\r\n-    initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-      initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n-import Splide from '@splidejs/splide'\r\n-import '@splidejs/splide/css'\r\n-import './style.styl'\r\n-\r\n-const sel = (e) => document.querySelector(e)\r\n-const selAll = (e) => document.querySelectorAll(e)\r\n-const l = (...e) => console.log(...e)\r\n-const isDomEl = (el) => el instanceof Document || el instanceof Element\r\n-\r\n-const contentDd$ = sel('.lib-filter__dd--content')\r\n-const sliderPrefix = 'lib-item'\r\n-let sliders = []\r\n-function toggleItems(_el) {\r\n-  selAll('.lib-item').forEach((el) => {\r\n-    if (el.classList.contains('lib-item--' + _el)) {\r\n-      el.classList.remove('hide')\r\n-    } else {\r\n-      el.classList.add('hide')\r\n-    }\r\n-  })\r\n-}\r\n-contentDd$.addEventListener('change', (e) => {\r\n-  switch (e.target.value) {\r\n-    case 'blog':\r\n-      toggleItems('blog')\r\n-      break\r\n-    case 'podcast':\r\n-      toggleItems('podcast')\r\n-      break\r\n-    case 'article':\r\n-      toggleItems('article')\r\n-      break\r\n-    case 'whitepaper':\r\n-      toggleItems('whitepaper')\r\n-      break\r\n-    case 'video':\r\n-      toggleItems('video')\r\n-      break\r\n-    case 'webinar':\r\n-      toggleItems('webinar')\r\n-      break\r\n-    default:\r\n-      selAll('.lib-item').forEach((el) => {\r\n-        el.classList.remove('hide')\r\n-      })\r\n-  }\r\n-})\r\n-\r\n-sel('.clear-filter').addEventListener('click', (e) => {\r\n-  contentDd$.value = 'all'\r\n-  contentDd$.dispatchEvent(new Event('change'))\r\n-})\r\n-\r\n-let refreshSliderTo\r\n-//  const refreshSliderOb   =\r\n-// const config =\r\n-// function initSliderOb(slider)\r\n-// {\r\n-//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n-//     for (const mutation of mutationList) {\r\n-//       if (mutation.type === 'childList') {\r\n-//         refreshSlider(slider)\r\n-//       }\r\n-//     }\r\n-//   })\r\n-//   selAll('.lib-item__slider').forEach((el) => {\r\n-//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n-//   })\r\n-// }\r\n-//\r\n-function initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n-  // if (element$.observer?.[observerName]) return\r\n-  const observer = new MutationObserver(function (mutations) {\r\n-    element$.observerTimer = element$.observerTimer || {}\r\n-\r\n-    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n-\r\n-    clearTimeout(timer)\r\n-    element$.observerTimer[observerName] = setTimeout(() => {\r\n-      // l('upd:', timer, element)\r\n-      l(observerName, element$)\r\n-\r\n-      callback()\r\n-      // observer.disconnect()\r\n-    }, timeout)\r\n-  })\r\n-  observer.observe(element$, { childList: true, attributes: false })\r\n-  element$.observer = element$.observer || {}\r\n-  element$.observer[observerName] = observer\r\n-}\r\n-window.fsAttributes = window.fsAttributes || []\r\n-window.fsAttributes.push([\r\n-  'cmsfilter',\r\n-  (filterInstances) => {\r\n-    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n-    const [filterInstance] = filterInstances\r\n-\r\n-    // The `renderitems` event runs whenever the list renders items after filtering.\r\n-    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n-      // console.log(renderedItems)\r\n-      sliders.forEach((slider, i) => {\r\n-        l(i)\r\n-        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n-          slider.refresh()\r\n-        })\r\n-        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n-          initSplideBullets(slider, sliderPrefix)\r\n-        })\r\n-        slider.refresh()\r\n-        slider.go(0)\r\n-        initSplideBullets(slider, sliderPrefix)\r\n-\r\n-        // slider.Components.Controller.toPage(1)\r\n-        // refreshSlider(slider)\r\n-      })\r\n-    })\r\n-  },\r\n-])\r\n-\r\n-// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\n-onDomReady(() => {\r\n-  selAll('.lib-item__slider').forEach((el) => {\r\n-    // const el = sel('.slider--' + el_)\r\n-    addSplideClasses(el)\r\n-\r\n-    const slider = new Splide(el, {\r\n-      arrows: false,\r\n-      pagination: false,\r\n-      gap: '2rem',\r\n-      // type: 'loop',\r\n-      // rewind: true,\r\n-      perPage: 3,\r\n-      perMove: 3,\r\n-      speed: 1500,\r\n-      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n-      breakpoints: {\r\n-        991: {\r\n-          perPage: 2,\r\n-        },\r\n-        478: {\r\n-          perPage: 1,\r\n-        },\r\n-      },\r\n-    }).mount()\r\n-    sliders.push(slider)\r\n-\r\n-    initSplideArrows(slider, sliderPrefix)\r\n-    initSplideBullets(slider, sliderPrefix)\r\n-    slider.on('resized', () => {\r\n-      // initSplideBullets(slider, sliderPrefix)\r\n-    })\r\n-  })\r\n-})\r\n-\r\n-export function onDomReady(run) {\r\n-  if (document.readyState !== 'loading') {\r\n-    run()\r\n-  } else {\r\n-    document.addEventListener('DOMContentLoaded', function () {\r\n-      run()\r\n-    })\r\n-  }\r\n-}\r\n-export function initSplideBullets(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  // parse bullets inside the container and repopulate\r\n-  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n-  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n-  if (pages > 1) {\r\n-    // l(slider$, pages)\r\n-    pagination$.parentElement.style.maxHeight = 'none'\r\n-    // pagination$.style.visibility = 'visible'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n-\r\n-    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n-    let fragment = document.createDocumentFragment()\r\n-    for (let i = 0; i < pages; i++) {\r\n-      let clone$ = bullet$.cloneNode(true)\r\n-      clone$.addEventListener('click', (e) => {\r\n-        splide.go('>' + i)\r\n-      })\r\n-      fragment.appendChild(clone$)\r\n-    }\r\n-    fragment.firstChild.classList.add('bullet--active')\r\n-    pagination$.replaceChildren(fragment)\r\n-  } else {\r\n-    // pagination$.replaceChildren()\r\n-    pagination$.parentElement.style.maxHeight = '0px'\r\n-    // pagination$.style.visibility = 'hidden'\r\n-    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n-  }\r\n-  splide.on('move', function (newIndex, oldIndex) {\r\n-    if (pages < 2) return\r\n-    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n-    const index = Math.ceil(newIndex / splide.options.perPage)\r\n-\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n-    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n-  })\r\n-}\r\n-export function initSplideArrows(splide, classPrefix) {\r\n-  const slider$ = splide.root\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n-    splide.go('<')\r\n-  })\r\n-\r\n-  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n-    splide.go('>')\r\n-  })\r\n-}\r\n-export function addSplideClasses(slider) {\r\n-  let splide\r\n-  if (typeof slider === 'string') {\r\n-    splide = document.querySelector('.' + slider)\r\n-  } else if (isDomEl(slider)) {\r\n-    splide = slider\r\n-  }\r\n-  const track = splide.children[0]\r\n-  const list = track.children[0]\r\n-  const slide = list.childNodes\r\n-  splide.classList.add('splide')\r\n-  track.classList.add('splide__track')\r\n-  list.classList.add('splide__list')\r\n-  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n-}\r\n"
                }
            ],
            "date": 1705702366562,
            "name": "Commit-0",
            "content": "import Splide from '@splidejs/splide'\r\nimport { AutoScroll } from '@splidejs/splide-extension-auto-scroll'\r\nimport { Intersection } from '@splidejs/splide-extension-intersection'\r\nimport '@splidejs/splide/css'\r\nimport './style.styl'\r\n\r\nconst sel = (e) => document.querySelector(e)\r\nconst selAll = (e) => document.querySelectorAll(e)\r\nconst l = (e) => console.log(e)\r\n\r\nl('qwe')\r\n"
        }
    ]
}
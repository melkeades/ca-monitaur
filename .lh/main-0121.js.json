{
    "sourceFile": "main-0121.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1705891025592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1705891025592,
            "name": "Commit-0",
            "content": "import Splide from '@splidejs/splide'\r\nimport '@splidejs/splide/css'\r\nimport './style.styl'\r\n\r\nconst sel = (e) => document.querySelector(e)\r\nconst selAll = (e) => document.querySelectorAll(e)\r\nconst l = (...e) => console.log(...e)\r\nconst isDomEl = (el) => el instanceof Document || el instanceof Element\r\n\r\nconst contentDd$ = sel('.lib-filter__dd--content')\r\nconst sliderPrefix = 'lib-item'\r\nlet sliders = []\r\nfunction toggleItems(_el) {\r\n  selAll('.lib-item').forEach((el) => {\r\n    if (el.classList.contains('lib-item--' + _el)) {\r\n      el.classList.remove('hide')\r\n    } else {\r\n      el.classList.add('hide')\r\n    }\r\n  })\r\n}\r\ncontentDd$.addEventListener('change', (e) => {\r\n  switch (e.target.value) {\r\n    case 'blog':\r\n      toggleItems('blog')\r\n      break\r\n    case 'podcast':\r\n      toggleItems('podcast')\r\n      break\r\n    case 'article':\r\n      toggleItems('article')\r\n      break\r\n    case 'whitepaper':\r\n      toggleItems('whitepaper')\r\n      break\r\n    case 'video':\r\n      toggleItems('video')\r\n      break\r\n    case 'webinar':\r\n      toggleItems('webinar')\r\n      break\r\n    default:\r\n      selAll('.lib-item').forEach((el) => {\r\n        el.classList.remove('hide')\r\n      })\r\n  }\r\n})\r\n\r\nsel('.clear-filter').addEventListener('click', (e) => {\r\n  contentDd$.value = 'all'\r\n  contentDd$.dispatchEvent(new Event('change'))\r\n})\r\n\r\nlet refreshSliderTo\r\n//  const refreshSliderOb   =\r\n// const config =\r\n// function initSliderOb(slider)\r\n// {\r\n//   const refreshSliderOb = new MutationObserver(function (mutationList, observer) {\r\n//     for (const mutation of mutationList) {\r\n//       if (mutation.type === 'childList') {\r\n//         refreshSlider(slider)\r\n//       }\r\n//     }\r\n//   })\r\n//   selAll('.lib-item__slider').forEach((el) => {\r\n//     refreshSliderOb.observe(el, { childList: true, subtree: true })\r\n//   })\r\n// }\r\n//\r\nfunction initObserver(element$, timeout = 100, observerName = 'default', callback) {\r\n  // if (element$.observer?.[observerName]) return\r\n  const observer = new MutationObserver(function (mutations) {\r\n    element$.observerTimer = element$.observerTimer || {}\r\n\r\n    const timer = element$.observerTimer?.[observerName] || Math.round(Math.random() * 10000)\r\n\r\n    clearTimeout(timer)\r\n    element$.observerTimer[observerName] = setTimeout(() => {\r\n      // l('upd:', timer, element)\r\n      l(observerName, element$)\r\n\r\n      callback()\r\n      // observer.disconnect()\r\n    }, timeout)\r\n  })\r\n  observer.observe(element$, { childList: true, attributes: false })\r\n  element$.observer = element$.observer || {}\r\n  element$.observer[observerName] = observer\r\n}\r\nwindow.fsAttributes = window.fsAttributes || []\r\nwindow.fsAttributes.push([\r\n  'cmsfilter',\r\n  (filterInstances) => {\r\n    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\r\n    const [filterInstance] = filterInstances\r\n\r\n    // The `renderitems` event runs whenever the list renders items after filtering.\r\n    filterInstance.listInstance.on('renderitems', (renderedItems) => {\r\n      // console.log(renderedItems)\r\n      sliders.forEach((slider, i) => {\r\n        l(i)\r\n        initObserver(slider.root.querySelector('.splide__list'), 100, 'refresh', () => {\r\n          slider.refresh()\r\n        })\r\n        initObserver(slider.root.querySelector('.splide__list'), 200, 'bullets', () => {\r\n          initSplideBullets(slider, sliderPrefix)\r\n        })\r\n        slider.refresh()\r\n        slider.go(0)\r\n        initSplideBullets(slider, sliderPrefix)\r\n\r\n        // slider.Components.Controller.toPage(1)\r\n        // refreshSlider(slider)\r\n      })\r\n    })\r\n  },\r\n])\r\n\r\n// ;['article', 'blog', 'podcast', 'news'].forEach((el_) => {\r\nonDomReady(() => {\r\n  selAll('.lib-item__slider').forEach((el) => {\r\n    // const el = sel('.slider--' + el_)\r\n    addSplideClasses(el)\r\n\r\n    const slider = new Splide(el, {\r\n      arrows: false,\r\n      pagination: false,\r\n      gap: '2rem',\r\n      // type: 'loop',\r\n      // rewind: true,\r\n      perPage: 3,\r\n      perMove: 3,\r\n      speed: 1500,\r\n      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n      breakpoints: {\r\n        991: {\r\n          perPage: 2,\r\n        },\r\n        478: {\r\n          perPage: 1,\r\n        },\r\n      },\r\n    }).mount()\r\n    sliders.push(slider)\r\n\r\n    initSplideArrows(slider, sliderPrefix)\r\n    initSplideBullets(slider, sliderPrefix)\r\n    slider.on('resized', () => {\r\n      // initSplideBullets(slider, sliderPrefix)\r\n    })\r\n  })\r\n})\r\n\r\nexport function onDomReady(run) {\r\n  if (document.readyState !== 'loading') {\r\n    run()\r\n  } else {\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      run()\r\n    })\r\n  }\r\n}\r\nexport function initSplideBullets(splide, classPrefix) {\r\n  const slider$ = splide.root\r\n  // parse bullets inside the container and repopulate\r\n  const pagination$ = slider$.querySelector(`.${classPrefix}__pagination`)\r\n  const pages = Math.ceil(splide.length / splide.options.perPage)\r\n  if (pages > 1) {\r\n    // l(slider$, pages)\r\n    pagination$.parentElement.style.maxHeight = 'none'\r\n    // pagination$.style.visibility = 'visible'\r\n    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'visible'\r\n\r\n    const bullet$ = slider$.querySelector(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n    let fragment = document.createDocumentFragment()\r\n    for (let i = 0; i < pages; i++) {\r\n      let clone$ = bullet$.cloneNode(true)\r\n      clone$.addEventListener('click', (e) => {\r\n        splide.go('>' + i)\r\n      })\r\n      fragment.appendChild(clone$)\r\n    }\r\n    fragment.firstChild.classList.add('bullet--active')\r\n    pagination$.replaceChildren(fragment)\r\n  } else {\r\n    // pagination$.replaceChildren()\r\n    pagination$.parentElement.style.maxHeight = '0px'\r\n    // pagination$.style.visibility = 'hidden'\r\n    // slider$.querySelector(`.${classPrefix}__arrows`).style.visibility = 'hidden'\r\n  }\r\n  splide.on('move', function (newIndex, oldIndex) {\r\n    if (pages < 2) return\r\n    // const index = splide.Components.Controller.toPage(splide.index) // works but the calculation can be wrong as the bullets are manually added\r\n    const index = Math.ceil(newIndex / splide.options.perPage)\r\n\r\n    slider$.querySelector(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n    slider$.querySelector(`.${classPrefix}__pagination .bullet:nth-of-type(${index + 1})`).classList.add('bullet--active')\r\n  })\r\n}\r\nexport function initSplideArrows(splide, classPrefix) {\r\n  const slider$ = splide.root\r\n  slider$.querySelector(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n    splide.go('<')\r\n  })\r\n\r\n  slider$.querySelector(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n    splide.go('>')\r\n  })\r\n}\r\nexport function addSplideClasses(slider) {\r\n  let splide\r\n  if (typeof slider === 'string') {\r\n    splide = document.querySelector('.' + slider)\r\n  } else if (isDomEl(slider)) {\r\n    splide = slider\r\n  }\r\n  const track = splide.children[0]\r\n  const list = track.children[0]\r\n  const slide = list.childNodes\r\n  splide.classList.add('splide')\r\n  track.classList.add('splide__track')\r\n  list.classList.add('splide__list')\r\n  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n}\r\n"
        }
    ]
}